{"version":3,"sources":["logo.svg","actions/theoretical.js","components/Menu.js","containers/Topbar.js","components/BounceNode.js","containers/dialogs/BaseDialog.js","components/MathNotation.js","containers/dialogs/pseudoDescription.js","containers/dialogs/References.js","containers/Main.js","components/ScrollTop.js","utils/generalUtils.js","utils/geometryUtils.js","sketches/Triangle.js","containers/dialogs/proofs/Lemma1.js","data/theo.js","containers/TheoreticalAnalysis.js","sketches/sketch.js","actions/demo.js","containers/simulator/SimulatorContainer.js","containers/simulator/TopButtonBar.js","containers/typo/SectionHeader.js","containers/dialogs/SwipeDialog.js","containers/Demo.js","sketches/CoverageHoleDefinition.js","sketches/SensingRate.js","sketches/ReferenceNode.js","sketches/Neighbors.js","sketches/CircumRadiusCenter.js","containers/DefinitionsAndNotations.js","sketches/Example.js","containers/AlgorithmDescription.js","routes.js","reducers/demo.js","reducers/index.js","reducers/theoretical.js","store/configureStore.js","App.js","serviceWorker.js","index.js","images/shape.svg","images/logo.svg"],"names":["module","exports","GET_THEORETICAL_THEOREMS","getTheorems","theorems","type","getTheoremsCreator","dispatch","Menu","label","pathname","Topbar","require","state","value","menuDrawer","handleChange","event","setState","mobileMenuOpen","mobileMenuClose","current","props","currentPath","window","scrollTo","classes","this","AppBar","position","color","className","appBar","Toolbar","Grid","container","spacing","alignItems","item","xs","flex","inline","Typography","variant","noWrap","Link","to","link","tagline","noTabs","Fragment","productLogo","iconContainer","IconButton","onClick","iconButton","aria-label","tabContainer","SwipeableDrawer","anchor","open","onClose","onOpen","title","List","map","index","ListItem","component","external","MaterialLink","href","search","location","button","key","ListItemText","primary","Tabs","indicatorColor","textColor","onChange","Tab","root","tabItem","Component","withRouter","withStyles","theme","boxShadow","borderBottom","palette","grey","backgroundColor","display","breakpoints","down","justifyContent","textDecoration","borderLeft","marginLeft","paddingLeft","up","paddingTop","float","paddingBottom","minWidth","BounceNode","id","src","style","borderRadius","animationDelay","circle","width","height","opacity","animation","zIndex","padding","spaceTop","marginTop","BaseDialog","Dialog","disableBackdropClick","disableEscapeKeyDown","aria-labelledby","aria-describedby","scroll","DialogTitle","DialogContent","DialogContentText","children","maxWidth","flexGrow","textAlign","flexDirection","bottomMargin","marginBottom","MathNotation","text","Provider","Node","formula","PseudoDescription","activeStep","handleClose","identifier","img","description","textTransform","gutterBottom","buttonOk","Button","autoFocus","stepsContainer","References","backgroundShape","Main","references","getStartedDialog","openDialog","dialogClose","openGetStartedDialog","closeGetStartedDialog","CssBaseline","justify","grid","Paper","paper","box2","alignRight","actionButtomR","box","connect","bindActionCreators","theoremsActions","overflow","background","backgroundSize","backgroundPosition","secondary","rangeLabel","topBar","outlinedButtom","margin","actionButtom","blockCenter","block","inlining","marginRight","buttonBar","noBorder","borderBottomStyle","loadingState","loadingMessage","top","left","ScrollToTop","prevProps","joinArrays","array1","array2","Set","x","y","sensingRate","isActive","isReference","oneHopeNeighbors","twoHopeNeighbors","coverageHolesAroundNode","active","Point","Triangle","nodeA","nodeB","nodeC","rightAngle","pointA","pointB","pointC","Math","abs","hypot","getDistanceAB","getDistanceAC","getDistanceBC","getArea","asin","getCircumRadius","PI","a2","squareDistanceBetweenPoints","b2","c2","a","sqrt","b","c","alpha","acos","betta","gamma","getAngles","isA","isB","isC","oa","ob","oc","mid_point","a1","b1","c1","determinant","Number","MAX_VALUE","A","B","C","resA","lineFromNodes","resB","oe","of","og","perpendicularBisectorFromLine","resC","e","f","g","circumcenter","lineLineIntersection","console","log","checkPointInsideCircle","referenceNode","nodeToCompare","radius","pow","distanceBetweenTwoPoints","nodesThatListenedMessageWithRespectToRadius","nodes","response","forEach","node","push","nodesThatCoverCircumCenter","circumCenter","sensingRange","TriangleSketch","p","setup","createCanvas","fill","myCustomRedrawAccordingToNewPropsHandler","triangle","computeCircumData","length","R","Z","getCircumCenter","isObtuse","isAcute","angles","drawTriangle","drawCircle","drawRadiusLine","otherNodes","modal","resizeCanvas","idLine","draw","i","ellipse","stroke","val","line","mousePressed","windowResized","Lemma1","des","nodesLemma1","triangleLemma1","nodesLemma2","triangleLemma2","nodesLemma3","triangleLemma3","nodesLemma4","triangleLemma4","nodesLemma5","triangleLemma5","nodesLemma5_a","triangleLemma5_a","nodesLemma6","triangleLemma6","nodesLemma7","triangleLemma7","sketch","clickOnNodes","dangerouslySetInnerHTML","__html","DATA_THEO","defaultFormat","TheoreticalAnalysis","loading","selectedImage","selectedTest","modals","lemma1","content","lt","axiom","proof","keys","Object","GridList","gridList","cols","indx","GridListTile","flexWrap","transform","light","titleBar","document","getElementById","div2","offsetWidth","getCoords","sendCoords","undefined","addingNodes","addingNeighbors","mouseX","mouseY","canvasWidth","canvasHeight","GET_NODES","GET_SENSING_RATE","ADD_NODE","ADDING_NODES","ADDING_NEIGHBORS","NEIGHBOR_DISCOVERY_PHASE","COVERAGE_HOLE_DETECTION_PHASE","ADD_SENSING_RATE","ADD_COVERAGE_HOLE","SET_REFERENCE_NODES","SET_REFERENCE","SET_NEIGHBORS","ADD_NODE_ONE_HOPE_NEIGHBORS","ADD_NODE_TWO_HOPE_NEIGHBORS","DRAW_CIRCUM_CENTER","RESET","reset","getNodes","getSensingRate","addNodeCreator","addingNodesCreator","addingNeighborsCreator","neighborDiscoveryPhaseCreator","coverageHoleDetectionPhaseCreator","addSensingRateCreator","addCoverageHole","hole","setReferenceNodesCreator","referenceNodes","addNodeOneHopeNeighborCreator","neighbors","addNodeTwoHopeNeighborCreator","setReferenceCreator","drawCircumCenterCreator","valuetext","SimulatorContainer","onChangeSlider","getNeighbors","point","min","indexReference","distance","refNode","instruction","Slider","defaultValue","getAriaValueText","valueLabelDisplay","onChangeCommitted","step","marks","max","size","demo","neighborDiscoveryPhase","demoActions","itemContainer","baseline","alignSelf","inlineRight","backButton","createMuiTheme","green","red","TopButtonBar","handleAddNodes","handleSimulation","handleNeighbors","handleNeighbor","handleCoverageHole","handleCoverage","handleNodeError","handleHelp","areThereReferenceNodes","filter","disabled","startIcon","SectionHeader","subtitle","sectionContainer","fontWeight","autoPlay","SwipeableViews","SwipeDialog","handleNext","prevState","handleBack","handleStepChange","handleCloseOk","onOk","checked","handleToggle","forceUpdate","dense","labelId","ListItemIcon","ListItemSecondaryAction","Checkbox","edge","inputProps","maxHeight","Demo","learnMoredialog","dialogCloseOk","handleStartSimulation","handleNeighborPhase","handleCoverageDetectionPhase","coverageHoleDetection","valM","union","findHoleBetweenReferenceNodeAndPairNeighbors","Ai","Aj","X","N","nodeX","N_u","N_uX","sort","firstN_uX","N_dX","combiNUx","array","k","combinations","run","level","start","getCombinations","isFirstTime","shift","direction","gridSide","sketch_ch_definition","sketchSensingRate","sketchReferenceNode","sketchNeighborNode","sketchCircumRadiusCenterNode","DefinitionsAndNotations","box1","exampleAlgo","firstTime","sendNeighbors","AlgorithmDescription","pseudoDescription","receiveNeighbors","concat","N_d","noHoleDetected","s","toString","store","HashRouter","Switch","Route","exact","path","initialState","coverageHoleDetectionPhase","coverageHoles","rootReducer","combineReducers","action","copy","prevStateHole","prevStateOneHop","prevStateTwoHop","prevStateSetReference","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","configureStore","preloadedState","createStore","applyMiddleware","thunk","logger","main","blue","indigo","typography","fontFamily","join","App","ThemeProvider","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f171998.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","export const GET_THEORETICAL_THEOREMS = 'GET_THEORETICAL_THEOREMS';\n\nexport const getTheorems = theorems => ({\n    type: GET_THEORETICAL_THEOREMS,\n    theorems\n});\n\nexport const getTheoremsCreator = () => dispatch =>\n    (\n        dispatch(getTheorems({}))\n    );\n\n","const Menu = [\n  {\n    label: \"Home\",\n    pathname: \"/\"\n  },\n  {\n    label: \"Definitions and Notations\",\n    pathname: \"/definitions\"\n  },\n  {\n    label: \"Algorithm\",\n    pathname: \"/algorithm\"\n  },\n  {\n    label: \"Theoretical Analysis\",\n    pathname: \"/tanalysis\"\n  },\n  {\n    label: \"Demo\",\n    pathname: \"/demo\"\n  }\n\n];\n\nexport default Menu;\n","import React,  { Component } from 'react';\nimport withStyles from '@material-ui/styles/withStyles';\nimport { Link, withRouter } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport { Link as MaterialLink } from '@material-ui/core'\nimport Menu from '../components/Menu';\n\nconst logo = require('../images/logo.svg');\n\nconst styles = theme => ({\n  appBar: {\n    position: 'relative',\n    boxShadow: 'none',\n    borderBottom: `1px solid ${theme.palette.grey['100']}`,\n    backgroundColor: 'white',\n\n  },\n  inline: {\n    display: 'inline'\n  },\n  flex: {\n    display: 'flex',\n    [theme.breakpoints.down('sm')]: {\n      display: 'flex',\n      justifyContent: 'space-evenly',\n      alignItems: 'center'\n    }\n  },\n  link: {\n    textDecoration: 'none',\n    color: 'inherit'\n  },\n  productLogo: {\n    display: 'inline-block',\n    borderLeft: `1px solid ${theme.palette.grey['A100']}`,\n    marginLeft: 32,\n    paddingLeft: 24,\n    [theme.breakpoints.up('md')]: {\n      paddingTop: '1.5em'\n    }\n  },\n  tagline: {\n    display: 'inline-block',\n    marginLeft: 10,\n    [theme.breakpoints.up('md')]: {\n      paddingTop: '0.8em'\n    }\n  },\n  iconContainer: {\n    display: 'none',\n    [theme.breakpoints.down('sm')]: {\n      display: 'block'\n    }\n  },\n  iconButton: {\n    float: 'right'\n  },\n  tabContainer: {\n    marginLeft: 32,\n    [theme.breakpoints.down('sm')]: {\n      display: 'none'\n    }\n  },\n  tabItem: {\n    paddingTop: 20,\n    paddingBottom: 20,\n    minWidth: 'auto'\n  }\n})\n\nclass Topbar extends Component {\n\n  state = {\n    value: 0,\n    menuDrawer: false\n  };\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  mobileMenuOpen = (event) => {\n    this.setState({ menuDrawer: true });\n  };\n\n  mobileMenuClose = (event) => {\n    this.setState({ menuDrawer: false });\n  };\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  current = () => {\n    if(this.props.currentPath === '/home') {\n      return 0\n    }\n    if(this.props.currentPath === '/tanalysis') {\n      return 3\n    }\n    if(this.props.currentPath === '/definitions') {\n      return 1\n    }\n    if(this.props.currentPath === '/algorithm') {\n      return 2\n    }\n    if(this.props.currentPath === '/demo') {\n      return 4\n    }\n  }\n\n  render() {\n\n    const { classes } = this.props;\n\n    return (\n      <AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\n        <Toolbar>\n            <Grid container spacing={24} alignItems=\"baseline\">\n              <Grid item xs={12} className={classes.flex}>\n                  <div className={classes.inline}>\n                    <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                      <Link to='/' className={classes.link}>\n                        <span className={classes.tagline}>INFO-F420 - Computational geometry</span>\n                      </Link>\n                    </Typography>\n                  </div>\n                  { !this.props.noTabs && (\n                    <React.Fragment>\n                      <div className={classes.productLogo}>\n                        <Typography>\n                          Coverage hole detection - WSN\n                        </Typography>\n                      </div>\n                      <div className={classes.iconContainer}>\n                        <IconButton onClick={this.mobileMenuOpen} className={classes.iconButton} color=\"inherit\" aria-label=\"Menu\">\n                          <MenuIcon />\n                        </IconButton>\n                      </div>\n                      <div className={classes.tabContainer}>\n                        <SwipeableDrawer anchor=\"right\" open={this.state.menuDrawer} onClose={this.mobileMenuClose} onOpen={this.mobileMenuOpen}>\n                          <AppBar title=\"Menu\" />\n                          <List>\n                            {Menu.map((item, index) => (\n                              <ListItem component={item.external ? MaterialLink : Link} href={item.external ? item.pathname : null} to={item.external ? null : {pathname: item.pathname, search: this.props.location.search}} button key={item.label}>\n                                <ListItemText primary={item.label} />\n                              </ListItem>\n                            ))}\n                          </List>\n                        </SwipeableDrawer>\n                        <Tabs\n                          value={this.current() || this.state.value}\n                          indicatorColor=\"primary\"\n                          textColor=\"primary\"\n                          onChange={this.handleChange}\n                        >\n                          {Menu.map((item, index) => (\n                            <Tab key={index} component={item.external ? MaterialLink : Link} href={item.external ? item.pathname : null} to={item.external ? null : {pathname: item.pathname, search: this.props.location.search}} classes={{root: classes.tabItem}} label={item.label} />\n                          ))}\n                        </Tabs>\n                      </div>\n                    </React.Fragment>\n                  )}\n              </Grid>\n            </Grid>\n        </Toolbar>\n      </AppBar>\n    )\n  }\n}\n\nexport default withRouter(withStyles(styles)(Topbar))\n","import React, {Component} from 'react';\nimport withStyles from '@material-ui/styles/withStyles';\n\nconst styles = theme => ({\n    circle: {\n        borderRadius: '50%',\n        backgroundColor: 'deepskyblue',\n        width: '150px',\n        height: '150px',\n        position: 'absolute',\n        opacity: 0,\n        animation: 'scaleIn 4s infinite cubic-bezier(.36, .11, .89, .32)'\n    },\n    item: {\n        zIndex: 100,\n        padding: 5\n    },\n    spaceTop: {\n        marginTop: 20\n    }\n});\n\nclass BounceNode extends Component {\n\n    render() {\n        const {classes} = this.props;\n\n        return (\n            <div id=\"outerContainer\">\n                <div id=\"container\">\n                    <div className=\"item\">\n                        <img src=\"https://png.pngtree.com/svg/20170906/sensor_609853.png\"\n                             style={{backgroundColor : 'rgba(255,255,255,0.6)',\n                             borderRadius : '110px'}}/>\n                    </div>\n                    <div className=\"circle\" style={{animationDelay: '-2s'}}/>\n                    <div className=\"circle\" style={{animationDelay: '-1s'}}/>\n                    <div className=\"circle\" style={{animationDelay: '0s'}}/>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withStyles(styles)(BounceNode);\n","import React, {Component} from 'react';\nimport withStyles from '@material-ui/styles/withStyles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst styles = theme => ({\n    container: {\n        maxWidth: 800,\n        flexGrow: 1,\n        textAlign: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    bottomMargin: {\n        marginBottom: theme.spacing(2)\n    }\n});\n\nclass BaseDialog extends Component {\n    render() {\n        const {classes, open, onClose} = this.props;\n        return (\n            <Dialog\n                disableBackdropClick\n                disableEscapeKeyDown\n                open={open}\n                onClose={onClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                scroll='body'\n            >\n                <DialogTitle id=\"alert-dialog-title\"></DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        <div className={classes.container}>\n                            {this.props.children}\n                        </div>\n                    </DialogContentText>\n                </DialogContent>\n            </Dialog>\n        )\n    }\n}\n\nexport default withStyles(styles)(BaseDialog);\n","import React, {Component} from \"react\";\nimport MathJax from 'react-mathjax'\n\nclass MathNotation extends Component {\n    render() {\n        const {text, inline} = this.props;\n        return (\n            <span>\n                {\n                    inline && (\n                        <MathJax.Provider>\n                            <MathJax.Node inline formula={text}/>\n                        </MathJax.Provider>\n                    )\n                }\n                {!inline &&\n                <p>\n                    <MathJax.Provider>\n                        <div>\n                            <MathJax.Node formula={text}/>\n                        </div>\n                    </MathJax.Provider>\n                </p>\n                }\n            </span>\n\n\n        );\n    }\n}\n\nexport default MathNotation\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport withStyles from '@material-ui/styles/withStyles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport BaseDialog from './BaseDialog';\nimport SwipeableViews from 'react-swipeable-views';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport { autoPlay } from 'react-swipeable-views-utils';\nimport MathNotation from \"../../components/MathNotation\";\n\nconst styles = theme => ({\n  container: {\n    maxWidth: 800,\n    height: 1000,\n    flexGrow: 1,\n    textAlign: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  stepsContainer: {\n    marginLeft: 72,\n    textAlign: 'left',\n    marginTop: 20,\n    height: 65\n  },\n  bottomMargin: {\n    marginBottom: theme.spacing(2)\n  },\n  buttonOk:{\n    marginTop: theme.spacing(2),\n    textAlign: 'right'\n  }\n});\n\nclass PseudoDescription extends Component {\n\n  state = {\n    activeStep: 0\n  };\n\n  handleClose = () => {\n    this.props.onClose(this.props.identifier)\n  };\n\n  render() {\n    const { identifier,classes, img, description } = this.props;\n    const { activeStep } = this.state;\n    return (\n      <BaseDialog {...this.props}>\n        <div className={classes.container}>\n            <Typography style={{textTransform: 'uppercase'}} color='secondary' gutterBottom>\n              Hole detection phase pseudo code\n            </Typography>\n            <Typography style={{textAlign: 'left'}} variant=\"body2\" gutterBottom>\n              Let's check the pseudo code :) <br/>\n              <b>1.- Choose a random node <MathNotation inline={true} text={\"Y\"}/> and set it as reference node </b><br/>\n              <b>2.- Get one and two hop neighbors of <MathNotation inline={true} text={\"Y\"}/> and assign them to a set <MathNotation inline={true} text={\"M\"}/> </b><br/>\n              <b>3.- Select nodes from <MathNotation inline={true} text={\"M\"}/> whose y coordinate is greater or equal than the y-coordinate of <MathNotation inline={true} text={\"Y\"}/> and\n              assign them to a new set <MathNotation inline={true} text={\"M_u\"}/> </b><br/>\n              <b>4.- Sort nodes from <MathNotation inline={true} text={\"M_u\"}/> by x-coordinate in ascending order and\n                assign the result to a new set <MathNotation inline={true} text={\"M_uX\"}/> </b><br/>\n              <b>5.- Select nodes from <MathNotation inline={true} text={\"M\"}/> whose y coordinate is lower than the y-coordinate of <MathNotation inline={true} text={\"Y\"}/> and\n                assign them to a new set <MathNotation inline={true} text={\"M_d\"}/> </b><br/>\n              <b>6.- Sort nodes from <MathNotation inline={true} text={\"M_d\"}/> by x-coordinate in descending order and\n                assign the result to a new set <MathNotation inline={true} text={\"M_dX\"}/> </b><br/>\n              <b>7.- Choose the first to nodes <MathNotation inline={true} text={\"N_i\"}/> and <MathNotation inline={true} text={\"N_j\"}/> from  <MathNotation inline={true} text={\"M_uX\"}/> to begin the process</b><br/>\n              <b>do &#123;</b> <br/>\n              <b>8.- Choose the first to nodes <MathNotation inline={true} text={\"N_i\"}/> and <MathNotation inline={true} text={\"N_j\"}/> from  <MathNotation inline={true} text={\"M_uX\"}/> to begin the process</b><br/>\n              <b>9.- Verify if triangle <MathNotation inline={true} text={\"T\"}/> formed by <MathNotation inline={true} text={\"Y\"}/><MathNotation inline={true} text={\"N_i\"}/><MathNotation inline={true} text={\"N_j\"}/> is obtuse or acute</b><br/>\n              <b>10.- If (<MathNotation inline={true} text={\"T\"}/> is acute</b>)&#123; <br/>\n              &nbsp; <b> Get circum radius <MathNotation inline={true} text={\"R\"}/> of <MathNotation inline={true} text={\"T\"}/> and verify the following: </b>\n              <br/>\n              &nbsp; If (<MathNotation inline={true} text={\"R \\\\leq\\t R_s\"}/>)&#123; <br/>\n              &nbsp;&nbsp; <b>There is no coverage hole around <MathNotation inline={true} text={\"Y\"}/></b> <br/>\n              &nbsp; &#125; <br/>\n              &nbsp; else &#123; <br/>\n              &nbsp;&nbsp; <b>There is a coverage hole around <MathNotation inline={true} text={\"Y\"}/></b>  <br/>\n              &nbsp; &#125; <br/>\n              &#125; <br/>\n              &#125; <br/>\n              {/*-----*/}\n              <b>11.- If (<MathNotation inline={true} text={\"T\"}/> is obtuse</b>)&#123; <br/>\n              &nbsp; <b> Get circum radius <MathNotation inline={true} text={\"R\"}/> of <MathNotation inline={true} text={\"T\"}/> and verify the following: </b>\n              <br/>\n              &nbsp; If (<MathNotation inline={true} text={\"R \\\\leq\\t R_s\"}/>)&#123; <br/>\n              &nbsp;&nbsp; <b>There is no coverage hole around <MathNotation inline={true} text={\"Y\"}/></b> <br/>\n              &nbsp; &#125; <br/>\n              &nbsp; else &#123; <br/>\n              &nbsp;&nbsp;<b>12. Get circum center <MathNotation inline={true} text={\"Z\"}/> and verify the following:</b>  <br/>\n              &nbsp;&nbsp; If (<MathNotation inline={true} text={\"Z\"}/> is covered by any other sensor) &#123; <br/>\n              &nbsp;&nbsp;&nbsp; <b>No coverage hole exists around <MathNotation inline={true} text={\"Y\"}/></b> <br/>\n              &nbsp;&nbsp; &#125; <br/>\n              &nbsp;&nbsp; else &#123; <br/>\n              &nbsp;&nbsp;&nbsp; <b>A coverage hole exists around <MathNotation inline={true} text={\"Y\"}/></b> <br/>\n              &nbsp; &nbsp; &#125; <br/>\n              &nbsp; &#125; <br/>\n              &#125; <br/>\n              &#125; <br/>\n              <b>13.- Update <MathNotation inline={true} text={\"M_uX = M_uX - {A_i}\"}/>  </b>\n              &#125; <br/>\n              <b>while(<MathNotation inline={true} text={\"M_uX.length != 1\"}/>)</b>\n              <b>14.- Choose last node from <MathNotation inline={true} text={\"M_uX\"}/> and first node from <MathNotation inline={true} text={\"M_dX\"}/> </b>\n              <br/>\n              <b>15.- Repeat steps 8 to 13 with nodes from set <MathNotation inline={true} text={\"M_dX\"}/> </b> <br/>\n              <b>16.- Update <MathNotation inline={true} text={\"M_dX = M_dX - {A_i}\"}/> </b> <br/>\n              <b>17.- Continue until <MathNotation inline={true} text={\"M_dX = \\\\emptyset\"}/> </b> <br/>\n            </Typography>\n        </div>\n        <div className={classes.buttonOk}>\n          <Button variant='contained' onClick={this.handleClose} color=\"primary\" autoFocus>\n            Ok\n          </Button>\n        </div>\n      </BaseDialog>\n    )\n  }\n}\n\nexport default withRouter(withStyles(styles)(PseudoDescription));\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport withStyles from '@material-ui/styles/withStyles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport BaseDialog from './BaseDialog';\nimport SwipeableViews from 'react-swipeable-views';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport { autoPlay } from 'react-swipeable-views-utils';\nimport MathNotation from \"../../components/MathNotation\";\n\nconst styles = theme => ({\n  container: {\n    maxWidth: 800,\n    height: 200,\n    flexGrow: 1,\n    textAlign: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  stepsContainer: {\n    marginLeft: 72,\n    textAlign: 'left',\n    marginTop: 20,\n    height: 65\n  },\n  bottomMargin: {\n    marginBottom: theme.spacing(2)\n  },\n  buttonOk:{\n    marginTop: theme.spacing(2),\n    textAlign: 'right'\n  }\n});\n\nclass References extends Component {\n\n  state = {\n    activeStep: 0\n  };\n\n  handleClose = () => {\n    this.props.onClose(this.props.identifier)\n  };\n\n  render() {\n    const { identifier,classes, img, description } = this.props;\n    const { activeStep } = this.state;\n    return (\n      <BaseDialog {...this.props}>\n        <div className={classes.container}>\n            <Typography style={{textTransform: 'uppercase'}} color='secondary' gutterBottom>\n              References\n            </Typography>\n            <Typography style={{textAlign: 'left'}} variant=\"body2\" gutterBottom>\n              [1] Ma, Hwa-Chun & Sahoo, Prasan & Chen, Yen-Wen. (2011). Computational geometry based distributed coverage hole detection protocol for the wireless sensor networks. J. Network and Computer Applications. 34. 1743-1756. 10.1016/j.jnca.2011.06.007.\n\n            </Typography>\n        </div>\n        <div className={classes.buttonOk}>\n          <Button variant='contained' onClick={this.handleClose} color=\"primary\" autoFocus>\n            Ok\n          </Button>\n        </div>\n      </BaseDialog>\n    )\n  }\n}\n\nexport default withRouter(withStyles(styles)(References));\n","import React, {Component} from 'react';\nimport withStyles from '@material-ui/styles/withStyles';\nimport {Link, withRouter} from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport {connect} from 'react-redux'\nimport Topbar from './Topbar';\nimport {bindActionCreators} from \"redux\";\nimport * as theoremsActions from \"../actions/theoretical\";\nimport BounceNode from \"../components/BounceNode\";\nimport PseudoDescription from \"./dialogs/pseudoDescription\";\nimport References from \"./dialogs/References\";\n\nconst backgroundShape = require('../images/shape.svg');\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.grey['100'],\n        overflow: 'hidden',\n        background: `url(${backgroundShape}) no-repeat`,\n        backgroundSize: 'cover',\n        backgroundPosition: '0 400px',\n        paddingBottom: 200\n    },\n    grid: {\n        width: 1200,\n        marginTop: 40,\n        [theme.breakpoints.down('sm')]: {\n            width: 'calc(100% - 20px)'\n        }\n    },\n    paper: {\n        padding: theme.spacing(3),\n        textAlign: 'left',\n        color: theme.palette.text.secondary,\n    },\n    rangeLabel: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingTop: theme.spacing(2)\n    },\n    topBar: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        marginTop: 32\n    },\n    outlinedButtom: {\n        textTransform: 'uppercase',\n        margin: theme.spacing(1)\n    },\n    actionButtom: {\n        textTransform: 'uppercase',\n        margin: theme.spacing(1),\n        width: 152\n    },\n    actionButtomR: {\n        textTransform: 'uppercase',\n        margin: theme.spacing(1),\n        // width: 152\n    },\n    blockCenter: {\n        padding: theme.spacing(2),\n        textAlign: 'center'\n    },\n    block: {\n        padding: theme.spacing(2),\n    },\n    box: {\n        marginBottom: 40,\n        height: 180\n    },\n    box2: {\n        marginBottom: 40,\n        height: 100\n    },\n    inlining: {\n        display: 'inline-block',\n        marginRight: 10\n    },\n    buttonBar: {\n        display: 'flex'\n    },\n    alignRight: {\n        display: 'flex',\n        justifyContent: 'flex-end'\n    },\n    noBorder: {\n        borderBottomStyle: 'hidden'\n    },\n    loadingState: {\n        opacity: 0.05\n    },\n    loadingMessage: {\n        position: 'absolute',\n        top: '40%',\n        left: '40%'\n    }\n});\n\nclass Main extends Component {\n\n    state = {\n        references: false,\n        getStartedDialog: false\n    };\n\n    componentDidMount() {\n    }\n\n    openDialog = (event) => {\n        this.setState({references: true});\n    };\n\n    dialogClose = (event) => {\n        this.setState({references: false});\n    };\n\n    openGetStartedDialog = (event) => {\n        this.setState({getStartedDialog: true});\n    };\n\n    closeGetStartedDialog = (event) => {\n        this.setState({getStartedDialog: false});\n    };\n\n    render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <CssBaseline/>\n                <Topbar/>\n                <div className={classes.root}>\n                    <Grid container justify=\"center\">\n                        <Grid spacing={4} alignItems=\"center\" justify=\"center\" container className={classes.grid}>\n                            <Grid container item xs={12}>\n                                <Grid item xs={12}>\n                                    <Paper className={classes.paper}>\n                                        <div>\n                                            <div className={classes.box2}>\n                                                <Typography color='secondary' variant=\"h5\" gutterBottom>\n                                                    Welcome!\n                                                </Typography>\n                                                <Typography variant=\"h6\" gutterBottom>\n                                                    The following project is an implementation of an algorithm that\n                                                    applies computational geometry in order to find coverage holes in\n                                                    wireless sensor networks.\n                                                </Typography>\n                                            </div>\n                                            <div className={classes.alignRight}>\n                                                <Button onClick={this.openDialog} variant='text' color=\"primary\" className={classes.actionButtomR} autoFocus>\n                                                    References\n                                                </Button>\n                                                <Button component={Link} to='/algorithm' variant='text' onClick={() => {\n                                                }} color=\"primary\" className={classes.actionButtomR} autoFocus>\n                                                    Algorithm explanation\n                                                </Button>\n                                                <Button component={Link} to='/definitions'  color='primary' variant=\"outlined\"\n                                                        className={classes.actionButtomR}>\n                                                    Take me to some definitions!\n                                                </Button>\n                                                <Button component={Link} to='/demo' variant='contained' onClick={() => {\n                                                }} color=\"primary\" className={classes.actionButtomR} autoFocus>\n                                                    Go to Demo!!\n                                                </Button>\n                                            </div>\n                                        </div>\n                                    </Paper>\n                                </Grid>\n                            </Grid>\n                            <Grid container item xs={12}>\n                                <Grid item xs={3}>\n                                    <div>\n                                        <div className={classes.box}>\n                                            <BounceNode/>\n                                        </div>\n                                    </div>\n                                </Grid>\n                                <Grid item xs={3}>\n                                    <div>\n                                        <div className={classes.box} style={{paddingTop: '15px'}}>\n                                            <BounceNode/>\n                                        </div>\n                                    </div>\n                                </Grid>\n                                <Grid item xs={3}>\n                                    <div>\n                                        <div className={classes.box}>\n                                            <BounceNode/>\n                                        </div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <References\n                        open={this.state.references}\n                        onClose={this.dialogClose}/>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        theorems: state.theorems.theorems\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({...theoremsActions}, dispatch)\n}\n\n// export default withRouter(withStyles(styles)(Main));\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(withStyles(styles)(Main)))\n","import { Component } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nclass ScrollToTop extends Component {\n    componentDidUpdate(prevProps) {\n      if (this.props.location.pathname !== prevProps.location.pathname) {\n        window.scrollTo(0, 0);\n      }\n    }\n\n    render() {\n      return this.props.children;\n    }\n  }\n\n  export default withRouter(ScrollToTop);\n","export function joinArrays(array1, array2) {\n    return [...new Set([...array1, ...array2])]\n}\n\nexport function getCombinations(array, k){\n    let combinations = [];\n    let response = [];\n\n    function run(level, start){\n\n        for(var i=start; i < array.length - k + level + 1; i++){\n            combinations[level] = array[i];\n\n            if(level < k - 1){\n                run(level + 1, i + 1);\n            } else {\n                response.push(combinations)\n                console.log(combinations)\n                // console.log(combinations.join(\" \"));\n            }\n        }\n\n    }\n    run(0, 0);\n    return response;\n}\n","import {getCombinations, joinArrays} from \"./generalUtils\";\n\n\nexport class Node {\n    constructor(x, y, id = 0, sensingRate = 80, isActive = true, isReference = false) {\n        this.x = x;\n        this.y = y;\n        this.sensingRate = sensingRate;\n        this.oneHopeNeighbors = [];\n        this.twoHopeNeighbors = [];\n        this.coverageHolesAroundNode = [];\n        this.active = isActive;\n        this.isReference = isReference;\n        this.id = id\n    }\n}\n\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nexport class Triangle {\n    rightAngle = 1.571; // 90 degrees equivalence\n    constructor(nodeA, nodeB, nodeC) {\n        this.pointA = nodeA;\n        this.pointB = nodeB;\n        this.pointC = nodeC;\n    }\n\n    getArea() {\n        return Math.abs(0.5 * (this.pointA.x * (this.pointB.y - this.pointC.y) + this.pointB.x * (this.pointC.y - this.pointA.y) + this.pointC.x * (this.pointA.y - this.pointB.y)))\n    }\n\n    getDistanceAB() {\n        return Math.hypot(this.pointB.x - this.pointA.x, this.pointB.y - this.pointA.y)\n    }\n\n    getDistanceAC() {\n        return Math.hypot(this.pointC.x - this.pointA.x, this.pointC.y - this.pointA.y)\n    }\n\n    getDistanceBC() {\n        return Math.hypot(this.pointC.x - this.pointB.x, this.pointC.y - this.pointB.y)\n    }\n\n    getCircumRadius() {\n        return (this.getDistanceAB() * this.getDistanceAC() * this.getDistanceBC()) / (4 * this.getArea())\n    }\n\n    getAngleA() {\n        return Math.asin(this.getDistanceAB() / (2 * this.getCircumRadius()))\n    }\n\n    getAngleC() {\n        return Math.asin(this.getDistanceAC() / (2 * this.getCircumRadius()))\n    }\n\n    getAngleB() {\n        return Math.asin(this.getDistanceBC() / (2 * this.getCircumRadius()))\n    }\n\n    getAngleADegree() {\n        return Math.asin(this.getDistanceAB() / (2 * this.getCircumRadius())) * (180 / Math.PI)\n    }\n\n    getAngleCDegree() {\n        return Math.asin(this.getDistanceAC() / (2 * this.getCircumRadius())) * (180 / Math.PI)\n    }\n\n    getAngleBDegree() {\n        return Math.asin(this.getDistanceBC() / (2 * this.getCircumRadius())) * (180 / Math.PI)\n    }\n\n    getAngles() {\n        const a2 = squareDistanceBetweenPoints(this.pointB, this.pointC);\n        const b2 = squareDistanceBetweenPoints(this.pointA, this.pointC);\n        const c2 = squareDistanceBetweenPoints(this.pointA, this.pointB);\n\n        const a = Math.sqrt(a2);\n        const b = Math.sqrt(b2);\n        const c = Math.sqrt(c2);\n\n        const alpha = Math.acos((b2 + c2 - a2) / (2 * b * c));\n        const betta = Math.acos((a2 + c2 - b2) / (2 * a * c));\n        const gamma = Math.acos((a2 + b2 - c2) / (2 * a * b));\n        return {alpha, betta, gamma}\n    }\n\n    isObtuse() {\n        const {alpha, betta, gamma} = this.getAngles();\n        const isA = alpha > this.rightAngle;\n        const isB = betta > this.rightAngle;\n        const isC = gamma > this.rightAngle;\n        return isA || isB || isC\n    }\n\n    isAcute() {\n        const {alpha, betta, gamma} = this.getAngles();\n        const isA = alpha < this.rightAngle;\n        const isB = betta < this.rightAngle;\n        const isC = gamma < this.rightAngle;\n        return isA && isB && isC\n    }\n\n    // Function to find the line given two points\n    lineFromNodes(nodeA, nodeB) {\n        const a = nodeB.y - nodeA.y;\n        const b = nodeA.x - nodeB.x;\n        const c = a * (nodeA.x) + b * (nodeA.y);\n        return {\n            a,\n            b,\n            c\n        }\n    }\n\n    // Function which converts the input line to its\n    // perpendicular bisector. It also inputs the points\n    // whose mid-point lies on the bisector\n    perpendicularBisectorFromLine(nodeA, nodeB, oa, ob, oc) {\n        const mid_point = new Point((nodeA.x + nodeB.x) / 2,\n            (nodeA.y + nodeB.y) / 2);\n        // c = -bx + ay\n        const c = -ob * (mid_point.x) + oa * (mid_point.y);\n        const temp = oa;\n        const a = -ob;\n        const b = temp;\n        return {\n            a,\n            b,\n            c\n        }\n    }\n\n    // Returns the intersection point of two lines\n    lineLineIntersection(a1, b1, c1, a2, b2, c2) {\n        const determinant = a1 * b2 - a2 * b1;\n        if (determinant === 0) {\n            // The lines are parallel. This is simplified\n            // by returning a pair of FLT_MAX\n            return new Point(Number.MAX_VALUE, Number.MAX_VALUE);\n        } else {\n            const x = (b2 * c1 - b1 * c2) / determinant;\n            const y = (a1 * c2 - a2 * c1) / determinant;\n            return new Point(x, y);\n        }\n    }\n\n    getCircumCenter(A = this.pointA, B = this.pointB, C = this.pointC) {\n        // Line AB is represented as ax + by = c\n        let resA = this.lineFromNodes(A, B);\n        let oa = resA.a;\n        let ob = resA.b;\n        let oc = resA.c;\n\n        // Line BC is represented as ex + fy = g\n        let resB = this.lineFromNodes(B, C);\n        let oe = resB.a;\n        let of = resB.b;\n        let og = resB.c;\n\n        // Converting lines PQ and QR to perpendicular\n        // vbisectors. After this, L = ax + by = c\n        // M = ex + fy = g\n        let {a, b, c} = this.perpendicularBisectorFromLine(A, B, oa, ob, oc);\n        let resC = this.perpendicularBisectorFromLine(B, C, oe, of, og);\n        let e = resC.a;\n        let f = resC.b;\n        let g = resC.c;\n\n        // The point of intersection of L and M gives\n        // the circumcenter\n        const circumcenter =\n            this.lineLineIntersection(a, b, c, e, f, g);\n\n        if (circumcenter.x === Number.MAX_VALUE &&\n            circumcenter.y === Number.MAX_VALUE) {\n            console.log(\"The two perpendicular bisectors found come parallel\");\n            console.log(\"Thus, the given points do not form a triangle and are collinear\");\n        } else {\n            console.log(\"The circumcenter of the triangle PQR is: \");\n            console.log(circumcenter.x, circumcenter.y);\n        }\n        return circumcenter\n    }\n}\n\nexport function checkPointInsideCircle(referenceNode, nodeToCompare, radius) {\n    const square_dist = Math.sqrt(Math.pow((referenceNode.x - nodeToCompare.x), 2) + Math.pow((referenceNode.y - nodeToCompare.y), 2));\n    return square_dist <= radius\n}\n\nexport function squareDistanceBetweenPoints(nodeA, nodeB) {\n    // (xA − xB)2 + (yA − yB)2\n    return Math.pow((nodeA.x - nodeB.x), 2) + Math.pow((nodeA.y - nodeB.y), 2)\n}\n\nexport function distanceBetweenTwoPoints(pointA, pointB) {\n    return Math.hypot(pointA.x - pointB.x, pointA.y - pointB.y);\n}\n\n\nexport function nodesThatListenedMessageWithRespectToRadius(referenceNode, nodes, sensingRate) {\n    let response = {\n        oneHopeNeighbors: [],\n        twoHopeNeighbors: []\n    };\n    nodes.forEach((node, index) => {\n        if (referenceNode !== index) {\n            if (checkPointInsideCircle(nodes[referenceNode], node, sensingRate)) {\n                response.oneHopeNeighbors.push(index)\n            }\n            if (checkPointInsideCircle(nodes[referenceNode], node, 2 * sensingRate)) {\n                response.twoHopeNeighbors.push(index)\n            }\n        }\n    });\n    return response\n}\n\nexport function nodesThatCoverCircumCenter(circumCenter, nodes, sensingRange) {\n    let response = [];\n    nodes.forEach((node) => {\n        if (checkPointInsideCircle(node, circumCenter, sensingRange)) {\n            response.push(node)\n        }\n    });\n    return response\n};\n\nexport function checkClickInside(mouseX, mouseY, canvasWidth, canvasHeight) {\n    return mouseX > 0 && mouseX < canvasWidth && mouseY > 0 && mouseY < canvasHeight\n}\n\nfunction getDegree(pointA, pointB) {\n    const a2 = squareDistanceBetweenPoints(pointA, pointB);\n    return Math.sqrt(a2)\n}\n\n//\n// export function coverageHoleDetection(nodeList) {\n//     let i = 0;\n//     const nodes = nodeList.filter((node) => node.active);\n//     // Step 1: Select any node X randomly as a reference node;\n//     const referenceNodes = nodes.filter((val) => val.isReference).map((valM) => valM.id);\n//     const X = referenceNodes[0];\n//     // Step 2: Find one and two-hop neighbors of X;\n//     const {oneHopeNeighbors, twoHopeNeighbors} = this.nodesThatListenedMessageWithRespectToRadius(X, nodes, true, \"Hello\");\n//     // Assign those nodes to set N\n//     const N = joinArrays(oneHopeNeighbors, twoHopeNeighbors);\n//     const nodeX = nodes[X];\n//\n//     // Step 3: Select nodes from set N whose y-coordinate >= b; Assign those nodes to set Nu\n//     const N_u = N.map((val) => nodes[val]).filter((val) => val.y <= nodeX.y);\n//\n//     // Step 4: Arrange nodes of Nu with their x-coordinate in ascending order and put them in a new set Nux,\n//     const N_uX = N_u.sort(function (a, b) {\n//         return a.x - b.x\n//     });\n//     const firstN_uX = N_uX.length > 0 ? N_uX[0] : 0;\n//\n//     // Step 5: Select nodes from set N whose y-coordinate < b; Assign those nodes to set Nd;\n//     const N_d = N.map((val) => nodes[val]).filter((val) => val.y > nodeX.y);\n//\n//     // Step 6: Arrange nodes of Nd with their x-coordinate in descending order and put them in a new set Ndx\n//     const N_dX = N_d.sort(function (a, b) {\n//         return b.x - a.x\n//     });\n//     const combiNUx = getCombinations(N_u, 2);\n//     console.log(\"combiNUx\")\n//     console.log(combiNUx)\n//\n//     // Step 7: Select 1st two nodes Ai and Aj from Nux such that x-coordinate of Ai < Aj\n//     let isFirstTime = true;\n//     if (N_uX.length >= 2) {\n//         do {\n//             console.log(\"Entro!!\");\n//             let Ai = N_uX[0];\n//             let Aj = N_uX[1];\n//             this.findHoleBetweenReferenceNodeAndPairNeighbors(nodeX, Ai, Aj);\n//             // Step 13: Update Nux’Nux􏰁fAig\n//             N_uX.shift();\n//             const whileCond = N_uX.length !== 1;\n//             i++;\n//         } while (N_uX.length !== 1);\n//     } else {\n//         console.log(\"X\");\n//         console.log(nodeX)\n//         const Z = new Point(0, 0)\n//         console.log(\"%cThere exists a hole around the reference node \" + nodeX.id + \"\", \"color: red; font-size:15px;\");\n//         this.props.addCoverageHole(nodeX.id, Z);\n//     }\n//\n//     // Step 14: Choose the 1st node Ai of Ndx and last balance node Aj of Nux;\n//     if (N_dX.length > 0) {\n//         do {\n//             let Ai = 0;\n//             let Aj = 0;\n//             if (isFirstTime && N_uX.length > 0) {\n//                 Ai = N_dX[0];\n//                 Aj = N_uX[0];\n//                 this.findHoleBetweenReferenceNodeAndPairNeighbors(nodeX, Ai, Aj);\n//             } else if (N_dX.length > 1) {\n//                 Ai = N_dX[0];\n//                 Aj = N_dX[1];\n//                 this.findHoleBetweenReferenceNodeAndPairNeighbors(nodeX, Ai, Aj);\n//             }\n//\n//             if (isFirstTime) {\n//                 isFirstTime = false\n//             } else {\n//                 N_dX.shift()\n//             }\n//\n//\n//         } while (N_dX.length !== 1);\n//     }\n//     if (N_dX.length > 0) {\n//         this.findHoleBetweenReferenceNodeAndPairNeighbors(nodeX, N_dX[0], firstN_uX);\n//     }\n//\n//\n//     this.props.coverageHoleDetectionPhaseCreator();\n// };\n//\n// export function findHoleBetweenReferenceNodeAndPairNeighbors(referenceNode, Ai, Aj) {\n//\n//     const triangle = new Triangle(referenceNode, Ai, Aj);\n//     const {nodes, sensingRate} = this.props;\n//     console.log(\"--------------------------------------------\");\n//     console.log(\"Triangle between reference node and points:\");\n//     console.log(referenceNode.id);\n//     console.log(Ai.id);\n//     console.log(Aj.id);\n//     console.log(\"--------------------------------------------\");\n//     // Step 8: Compute circum radius R and circum center Z of triangle XAiAj;\n//     const R = triangle.getCircumRadius();\n//     const Z = triangle.getCircumCenter();\n//     console.log(\"Circum center: \", Z);\n//     console.log(\"Circum Raduis: \", R);\n//     console.log(\"Sensing rate: \", sensingRate);\n//     this.props.drawCircumCenterCreator(Z);\n//     this.props.addCoverageHole(referenceNode.id, Z);\n//     // Step 9: Verify if XAiAj is an acute or obtuse triangle;\n//     const isObtuse = triangle.isObtuse();\n//     const isAcute = triangle.isAcute();\n//     if (isThereCoverageHole(R, Z, isObtuse, isAcute, referenceNode.sensingRate)) {\n//\n//     }\n//\n//     // Step 10: If (X forms an acute triangle with its neighbors Ai and Aj)\n//     if (isAcute) {\n//         if (R < referenceNode.sensingRate) {\n//             console.log(\"%cNo hole exists around the reference node \" + referenceNode.id + \"\", \"color: green; font-size:15px;\")\n//         } else {\n//             console.log(\"%cThere exists a hole around the reference node \" + referenceNode.id + \"\", \"color: red; font-size:15px;\");\n//\n//         }\n//     }\n//     if (isObtuse) {\n//         if (R < referenceNode.sensingRate) {\n//             console.log(\"%cNo hole exists around the reference node \" + referenceNode.id + \"\", \"color: green; font-size:15px;\")\n//         } else {\n//             // Check if circum center Z is covered by any other sensor\n//             let noHoleDetected = this.nodesThatCoverCircumCenter(Z, nodes).length > 0;\n//             if (noHoleDetected) {\n//                 console.log(\"No hole exists around the reference node \" + referenceNode.id + \"\", \"color: green; font-size:15px;\")\n//             } else {\n//                 console.log(\"%cThere exists a hole around the reference node \" + referenceNode.id + \"\", \"color: red; font-size:15px;\");\n//                 this.props.addCoverageHole(referenceNode.id, Z);\n//             }\n//         }\n//     }\n//\n// }\n//\n// export function isThereCoverageHole(R, Z, isObtuse, isAcute, sensingRate,) {\n//     let response = false;\n//     // Step 10: If (X forms an acute triangle with its neighbors Ai and Aj)\n//     if (isAcute) {\n//         if (R < sensingRate) {\n//             console.log(\"%cNo hole exists around the reference node \" + referenceNode.id + \"\", \"color: green; font-size:15px;\")\n//         } else {\n//             console.log(\"%cThere exists a hole around the reference node \" + referenceNode.id + \"\", \"color: red; font-size:15px;\");\n//             response = true\n//         }\n//     }\n//     if (isObtuse) {\n//         if (R < referenceNode.sensingRate) {\n//             console.log(\"%cNo hole exists around the reference node \" + referenceNode.id + \"\", \"color: green; font-size:15px;\")\n//         } else {\n//             // Check if circum center Z is covered by any other sensor\n//             let noHoleDetected = this.nodesThatCoverCircumCenter(Z, nodes).length > 0;\n//             if (noHoleDetected) {\n//                 console.log(\"No hole exists around the reference node \" + referenceNode.id + \"\", \"color: green; font-size:15px;\")\n//             } else {\n//                 console.log(\"%cThere exists a hole around the reference node \" + referenceNode.id + \"\", \"color: red; font-size:15px;\");\n//                 response = true\n//             }\n//         }\n//     }\n//     return response\n// }\n","import {\n    checkClickInside,\n    distanceBetweenTwoPoints,\n    nodesThatListenedMessageWithRespectToRadius,\n    Point,\n    squareDistanceBetweenPoints, Triangle\n} from \"../utils/geometryUtils\";\nimport {\n    Node\n} from \"../utils/geometryUtils\";\nimport {joinArrays} from \"../utils/generalUtils\";\n\n\nexport default function TriangleSketch(p) {\n    const sensingRate = 60;\n    const paddingx = 150;\n    const paddingy = 70;\n\n    p.setup = function () {\n        console.log(\"Coverage Holes\");\n        // console.log(div1.offsetWidth - 90);\n        p.createCanvas(600, 350);\n        p.fill('black');\n    };\n\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n        console.log(\"Will recevive props\");\n        console.log(props);\n        if (props.triangle) {\n            p.triangle = props.triangle;\n            p.nodes = [p.triangle.pointA, p.triangle.pointB, p.triangle.pointC]\n        }\n        if (props.computeCircumData && p.nodes && p.nodes.length > 2) {\n            p.computeCircumData = props.computeCircumData;\n            p.R = p.triangle.getCircumRadius();\n            p.Z = p.triangle.getCircumCenter();\n            p.isObtuse = p.triangle.isObtuse();\n            p.isAcute = p.triangle.isAcute();\n            p.angles = p.triangle.getAngles();\n        }\n        if (props.drawTriangle) {\n            p.drawTriangle = props.drawTriangle;\n            // p.nodes.forEach((n) => n.y += props.padding)\n        }\n        if (props.drawCircle) {\n            p.drawCircle = props.drawCircle;\n            // p.nodes.forEach((n) => n.y += props.padding)\n        }\n        if (props.drawRadiusLine){\n            p.drawRadiusLine = props.drawRadiusLine\n        }\n        if (props.otherNodes) {\n            p.nodes = props.otherNodes\n        }\n        if(props.modal){\n            p.resizeCanvas(250, 250);\n        }\n        if(props.idLine){\n            p.idLine = props.idLine\n        }\n    };\n\n    p.draw = function () {\n        p.background(200);\n        if (p.triangle && p.nodes) {\n            p.nodes.forEach((node, i) => {\n                if (node.active) {\n                    p.fill('rgba(0,0,0, 1)');\n                    p.ellipse(node.x, node.y, 6, 6);\n                    p.text('Node ' + (node.id) + '', node.x - 16, node.y + 15);\n                    p.stroke('black');\n                    p.fill('rgba(0,255,0, 0.15)');\n\n                    p.circle(node.x, node.y, node.sensingRate * 2);\n                    if (node.isReference) {\n                        p.fill('rgba(163, 255, 232, 0.25)');\n                        p.circle(node.x, node.y, 2 * node.sensingRate * 2)\n                    }\n                    if (node.coverageHolesAroundNode.length > 0) {\n                        // console.log(\"coverage holes!!!\")\n                        node.coverageHolesAroundNode.forEach((val, index) => {\n                            p.ellipse(val.x, val.y, 6, 6);\n                            p.text('cc: ' + index + '', val.x - 16, val.y + 15);\n                        })\n                    }\n                } else {\n                    // p.ellipse(node.x, node.y, 6, 6);\n                    // p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    // p.stroke('black');\n                    p.fill('rgba(255,0,0, 0.25)');\n                    p.circle(node.x, node.y, node.sensingRate * 2);\n                }\n            });\n        }\n        if (p.computeCircumData) {\n            p.ellipse(p.Z.x, p.Z.y, 6, 6);\n            p.text('Z', p.Z.x - 16, p.Z.y + 15);\n            p.fill('rgba(0,255,0, 0.00)');\n            if (p.drawCircle) {\n                p.circle(p.Z.x, p.Z.y, 2 * p.R);\n            }\n            if(p.drawRadiusLine){\n                const idLine = p.idLine || 0;\n                p.line(p.nodes[idLine].x, p.nodes[idLine].y, p.Z.x, p.Z.y);\n            }\n        }\n        if (p.drawTriangle) {\n            p.line(p.nodes[0].x, p.nodes[0].y, p.nodes[1].x, p.nodes[1].y);\n            p.line(p.nodes[1].x, p.nodes[1].y, p.nodes[2].x, p.nodes[2].y);\n            p.line(p.nodes[2].x, p.nodes[2].y, p.nodes[0].x, p.nodes[0].y);\n        }\n    };\n\n    p.mousePressed = function () {\n\n    };\n\n    p.windowResized = function () {\n        // let div1 = document.getElementById(\"paper\");\n        // p.resizeCanvas(div1.offsetWidth - 60, 300);\n    }\n};\n","import React, {Component} from 'react';\nimport {Link, withRouter} from 'react-router-dom';\nimport withStyles from '@material-ui/styles/withStyles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport BaseDialog from './../BaseDialog';\nimport SwipeableViews from 'react-swipeable-views';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport {autoPlay} from 'react-swipeable-views-utils';\nimport TriangleSketch from \"../../../sketches/Triangle\";\nimport P5Wrapper from \"react-p5-wrapper\";\nimport {Node, Triangle} from \"../../../utils/geometryUtils\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst logo = require('../../../images/logo.svg');\n\nconst styles = theme => ({\n    container: {\n        maxWidth: 600,\n        flexGrow: 1,\n        textAlign: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    stepsContainer: {\n        marginLeft: 72,\n        textAlign: 'left',\n        marginTop: 20,\n        height: 65\n    },\n    bottomMargin: {\n        marginBottom: theme.spacing(2)\n    },\n    buttonOk: {\n        marginTop: theme.spacing(2),\n        textAlign: 'right'\n    }\n});\n\nclass Lemma1 extends Component {\n\n    state = {\n        activeStep: 0\n    };\n\n    handleClose = () => {\n        this.props.onClose(this.props.identifier)\n    };\n\n    render() {\n        const {identifier, classes, img, description, des} = this.props;\n        const {activeStep} = this.state;\n        const sensingRate = 55;\n        const padding = 75;\n        const py = 25;\n        let nodesLemma1 = [\n            new Node(170 - padding, 200 - padding + py, 'RN', sensingRate, true, false),\n            new Node(170 - padding, 110 - padding + py, 'X', sensingRate),\n            new Node(230 - padding, 200 - padding + py, 'Y', sensingRate),\n        ];\n        const triangleLemma1 = new Triangle(nodesLemma1[0], nodesLemma1[1], nodesLemma1[2]);\n        let nodesLemma2 = [\n            new Node(175 - padding, 200 - padding + py, 'RN', sensingRate, true, false),\n            new Node(175 - padding, 110 - padding + py, 'X', sensingRate),\n            new Node(205 - padding, 150 - padding + py, 'Y', sensingRate),\n        ];\n        const triangleLemma2 = new Triangle(nodesLemma2[0], nodesLemma2[1], nodesLemma2[2]);\n        let nodesLemma3 = [\n            new Node(190 - padding, 200 - padding + py, 'RN', sensingRate, true, false),\n            new Node(190 - padding, 110 - padding + py, 'X', sensingRate),\n            new Node(205 - padding, 150 - padding + py, 'Y', sensingRate),\n        ];\n        const triangleLemma3 = new Triangle(nodesLemma3[0], nodesLemma3[1], nodesLemma3[2]);\n        let nodesLemma4 = [\n            new Node(255 - padding, 200 - padding + py, 'RN', sensingRate, true, false),\n            new Node(135 - padding, 200 - padding + py, 'X', sensingRate),\n            new Node(205 - padding, 130 - padding + py, 'Y', sensingRate),\n        ];\n        const triangleLemma4 = new Triangle(nodesLemma4[0], nodesLemma4[1], nodesLemma4[2]);\n        let nodesLemma5 = [\n            new Node(160 - padding, 110 - padding + py, 'RN', sensingRate, true, false),\n            new Node(210 - padding, 170 - padding + py, 'X', sensingRate),\n            new Node(150 - padding, 220 - padding + py, 'Y', sensingRate),\n        ];\n        const triangleLemma5 = new Triangle(nodesLemma5[0], nodesLemma5[1], nodesLemma5[2]);\n        let nodesLemma5_a = [\n            new Node(150 - padding, 170 - padding + py, 'RN', sensingRate, true, false),\n            new Node(250 - padding, 170 - padding + py, 'X', sensingRate),\n            new Node(220 - padding, 190 - padding + py, 'Y', sensingRate),\n        ];\n        const triangleLemma5_a = new Triangle(nodesLemma5_a[0], nodesLemma5_a[1], nodesLemma5_a[2]);\n        let nodesLemma6 = [\n            new Node(200 - padding, 100 - padding + py, 'RN', sensingRate, true, false),\n            new Node(135 - padding, 150 - padding + py, 'X', sensingRate),\n            new Node(290 - padding, 150 - padding + py, 'Y', sensingRate),\n        ];\n        const triangleLemma6 = new Triangle(nodesLemma6[0], nodesLemma6[1], nodesLemma6[2]);\n        let nodesLemma7 = [\n            new Node(200 - padding, 200 - padding + py, 'RN', sensingRate, true, false),\n            new Node(165 - padding, 200 - padding + py, 'X', sensingRate),\n            new Node(185 - padding, 130 - padding + py, 'Y', sensingRate),\n        ];\n        const triangleLemma7 = new Triangle(nodesLemma7[0], nodesLemma7[1], nodesLemma7[2]);\n\n        return (\n            <BaseDialog {...this.props}>\n                <div className={classes.container}>\n                    <Typography style={{textTransform: 'uppercase'}} color='secondary' gutterBottom>\n                        {identifier}\n                    </Typography>\n                    <Typography variant=\"body1\" gutterBottom>\n                        {des}\n                    </Typography>\n                    <div className={classes.gutterBottom}>\n                        {\n                            identifier === \"Lemma 1\" && (\n                                <P5Wrapper sketch={TriangleSketch}\n                                           modal={true}\n                                           drawCircle={false}\n                                           drawRadiusLine={true}\n                                           drawTriangle={true}\n                                           computeCircumData={true}\n                                           clickOnNodes={false}\n                                           triangle={triangleLemma1}/>\n                            )\n                        }\n                        {\n                            identifier === \"Lemma 2\" && (\n                                <P5Wrapper sketch={TriangleSketch}\n                                           modal={true}\n                                           drawCircle={false}\n                                           drawRadiusLine={false}\n                                           drawTriangle={true}\n                                           computeCircumData={true}\n                                           clickOnNodes={false}\n                                           triangle={triangleLemma2}/>\n                            )\n                        }\n                        {\n                            identifier === \"Lemma 3\" && (\n                                <P5Wrapper sketch={TriangleSketch}\n                                           modal={true}\n                                           drawCircle={false}\n                                           drawRadiusLine={false}\n                                           drawTriangle={true}\n                                           computeCircumData={true}\n                                           clickOnNodes={false}\n                                           triangle={triangleLemma3}/>\n                            )\n                        }\n                        {\n                            identifier === \"Lemma 4\" && (\n                                <P5Wrapper sketch={TriangleSketch}\n                                           modal={true}\n                                           drawCircle={false}\n                                           drawRadiusLine={true}\n                                           drawTriangle={true}\n                                           computeCircumData={true}\n                                           clickOnNodes={false}\n                                           triangle={triangleLemma4}/>\n                            )\n                        }\n                        {\n                            identifier === \"Lemma 5\" && (\n                                <div>\n                                    <Grid container justify=\"center\">\n                                        <Grid spacing={4} alignItems=\"center\" justify=\"center\" container>\n                                            <Grid container item xs={12}>\n                                                <Grid item xs={6}>\n                                                    <P5Wrapper sketch={TriangleSketch}\n                                                               modal={true}\n                                                               drawCircle={false}\n                                                               drawRadiusLine={true}\n                                                               idLine={1}\n                                                               drawTriangle={true}\n                                                               computeCircumData={true}\n                                                               clickOnNodes={false}\n                                                               triangle={triangleLemma5}/>\n\n                                                </Grid>\n                                                <Grid item xs={6}>\n                                                    <P5Wrapper sketch={TriangleSketch}\n                                                               modal={true}\n                                                               drawCircle={false}\n                                                               drawRadiusLine={true}\n                                                               idLine={0}\n                                                               drawTriangle={true}\n                                                               computeCircumData={true}\n                                                               clickOnNodes={false}\n                                                               triangle={triangleLemma5_a}/>\n                                                </Grid>\n                                            </Grid>\n\n                                        </Grid>\n                                    </Grid>\n                                </div>\n\n                            )\n                        }\n                        {\n                            identifier === \"Lemma 6\" && (\n                                <P5Wrapper sketch={TriangleSketch}\n                                           modal={true}\n                                           drawCircle={false}\n                                           drawRadiusLine={true}\n                                           drawTriangle={true}\n                                           computeCircumData={true}\n                                           clickOnNodes={false}\n                                           triangle={triangleLemma6}/>\n                            )\n                        }\n                        {\n                            identifier === \"Lemma 7\" && (\n                                <P5Wrapper sketch={TriangleSketch}\n                                           modal={true}\n                                           drawCircle={false}\n                                           drawRadiusLine={true}\n                                           drawTriangle={true}\n                                           computeCircumData={true}\n                                           clickOnNodes={false}\n                                           triangle={triangleLemma7}/>\n                            )\n                        }\n                    </div>\n                    <Typography style={{textAlign: 'left'}} variant=\"h6\" color='secondary' gutterBottom>\n                        Proof\n                    </Typography>\n                    <Typography variant=\"body2\" style={{textAlign: 'left'}} gutterBottom>\n                        <div className=\"content\" dangerouslySetInnerHTML={{__html: description}}/>\n                    </Typography>\n                </div>\n                <div className={classes.buttonOk}>\n                    <Button variant='contained' onClick={this.handleClose} color=\"primary\" autoFocus>\n                        Ok\n                    </Button>\n                </div>\n            </BaseDialog>\n        )\n    }\n}\n\nexport default withRouter(withStyles(styles)(Lemma1));\n","import MathNotation from \"../components/MathNotation\";\n\nexport const DATA_THEO = {\n    \"Axioms\": [\n        {\n            \"title\": \"Axiom 1\",\n            \"description\": \"A triangle formed by a reference node with any pair of its neighbors must be covered by the sensing range of those three nodes [1].\"\n        },\n        {\n            \"title\": \"Axiom 2\",\n            \"description\": \"Let T be the triangle formed by a reference node RN and with a pair of neighbors, the circum radius (R) of T must be either <= R_s or >R_s where R_s is the sensing range of a node [1].\"\n        },\n        {\n            \"title\": \"Axiom 3\",\n            \"description\": \"Let T be the triangle formed by a reference node RN and with a pair of neighbors, the circum center (Z) of T must be located inside or outside the sensing range of those three sensors [1].\"\n        }\n    ],\n    \"Lemmas\": [\n        {\n            \"title\": \"Lemma 1\",\n            \"description\": \"\\\"If an acute triangle is formed by a reference node with its one-hop neighbors, then no coverage hole exists within those three sensors\\\" Extracted as it is from [1].\",\n            \"proof\": {\n                \"img\": \"\",\n                \"description\": \"- Let T be a triangle formed by a reference node RN and any of its neighbors, call these nodes X and Y. \" +\n                    \"</br> - The maximum acute angle of T must be at most &pi;/2.\" +\n                    \"- Circum center Z  has to be located at most at one side of T, (see example above) <br>\" +\n                    \"- Circum Radius (R) is lower or equal than the sensing range (R_s), therefore there exists a common sensing region.\" +\n                    \"- There isn't a coverage hole within those nodes.\"\n            }\n        },\n        {\n            \"title\": \"Lemma 2\",\n            \"description\": \"\\\"If an obtuse triangle is formed by a reference node with its one-hop neighbors such that its circum radius R <= Rs , then no hole exists within those sensors.\\\" Extracted as it is from [1].\",\n            \"proof\": {\n                \"img\": \"\",\n                \"description\": \"- Let T be an <b>obtuse</b> triangle formed by a reference node RN and any of its neighbors, call these nodes X and Y. Suppose R <= Rs. </br>\" +\n                    \"- Circum center Z has to be covered by a sensor, this is clear since R <= Rs, therefore no coverage hole exists between those nodes.\"\n            }\n        },\n        {\n            \"title\": \"Lemma 3\",\n            \"description\": \"\\\"If an obtuse triangle is formed by a reference node with its one-hop neighbors such that its circum radius R>Rs, and circum center (Z) is not covered by any of its neighbors, then there must be a hole besides those sensors.\\\" Extracted as it is from [1]\",\n            \"proof\": {\n                \"img\": \"\",\n                \"description\": \"- Let T be an <b>obtuse</b> triangle formed by a reference node RN and any of its neighbors, call these nodes X and Y. Suppose R > Rs. </br>\" +\n                    \"- Circum center Z is not covered by any of the three sensors. </br>\" +\n                    \"- A coverage hole exits if Z is not covered by any other sensor.\"\n            }\n        },\n        {\n            \"title\": \"Lemma 4\",\n            \"description\": \"\\\"If an acute triangle is formed by a reference node with its two-hop neighbors and its circum radius R > Rs , then there must be a coverage hole within those sensors, otherwise no coverage hole exists\\\" Extracted as it is from [1]\",\n            \"proof\": {\n                \"img\": \"\",\n                \"description\": \"- Let T be an <b>acute</b> triangle formed by a reference node RN and any of its neighbors, call these nodes X and Y. </br>\" +\n                    \"- For contradiction purposes, let's assume that circum radius R is lower or equal than the sensing rate Rs (R <= Rs). </br>\" +\n                    \"- As a consequence of Lemma 1, there must be a common sensing region within the three nodes that form T, therefore there is not a coverage hole. </br>\" +\n                    \"- However, if there is no common sensing range as it can be seen in the example above then we have that R > Rs, therefore Z must be located outside the sensing region. \" +\n                    \"leading to a coverage hole\"\n            }\n        },\n        {\n            \"title\": \"Lemma 5\",\n            \"description\": \"\\\"If an obtuse triangle is formed by a reference node with its two-hop neighbors such that the angle subtended at the reference node is acute and R <= Rs, then no hole exists between them, then no hole exists within them, otherwise a hole must exists if circum center Z is not covered by any other sensor\\\" Extracted as it is from [1]\",\n            \"proof\": {\n                \"img\": \"\",\n                \"description\": \"- Let T be an <b>obtuse</b> triangle formed by a reference node RN and any of its <b>two-hop neighbors</b> where angle at RN is acute, </br>\" +\n                    \"- If R < Rs, then circum center Z must be covered by those three sensors, otherwise,  Z is not covered by them. </br>\" +\n                    \"\"\n            }\n        },\n        {\n            \"title\": \"Lemma 6\",\n            \"description\": \"\\\"If an obtuse triangle is formed by a reference node with its two-hop neighbors and the angle subtended at the reference node is obtuse, coverage hole exists in between those two-hop neighbors.\\\" Extracted as it is from [1]\",\n            \"proof\": {\n                \"img\": \"\",\n                \"description\": \"- Let T be an <b>obtuse</b> triangle formed by a reference node RN and any of its <b>two-hop neighbors (X and Y)</b> where angle at RN is acute, </br>\" +\n                    \"- No other nodes exist in between RN and XY since T is formed with two immediate nodes (due to ascending order of the set of neighbors). </br>\" +\n                    \"- Since R > Rs there is a coverage hole between X and Y.\"\n            }\n        },\n        {\n            \"title\": \"Lemma 7\",\n            \"description\": \"\\\"If an acute triangle is formed by a reference node with one of its one-hop neighbor and another one with its two-hop neighbors, no hole exists if R <= Rs , otherwise, coverage hole exists within them.\\\" Extracted as it is from [1]\",\n            \"proof\": {\n                \"img\": \"\",\n                \"description\": \"- Let T be an <b>acute</b> triangle formed by a reference node RN and any of its <b>two-hop neighbors (X and Y).</b> </br>\" +\n                    \"- If R <= Rs, then circum center Z must be covered by XY or RN.\"\n            }\n        },\n        // {\n        //     \"title\": \"Lemma 8\",\n        //     \"description\": \"\\\"If an obtuse triangle is formed by a reference node with one of its one-hop neighbor and another one with its two-hop neighbors, such that angle subtended at the reference node is acute, no hole exists within them if R<=Rs, otherwise a hole must exist if circum center Z is not covered by any other sensor\\\". Extracted as it is from [1]\",\n        //     \"proof\": {\n        //         \"img\": \"\",\n        //         \"description\": \"\"\n        //     }\n        // },\n        // {\n        //     \"title\": \"Lemma 9\",\n        //     \"description\": \"If the triangle formed by a reference node with one of its one-hop neighbor and another one with its two-hop neighbors subtends an obtuse angle at the reference node, hole exists within those neighbors.\",\n        //     \"proof\": {\n        //         \"img\": \"\",\n        //         \"description\": \"\"\n        //     }\n        // }\n    ],\n    \"Theorems\": [\n        {\n            \"title\": \"Theorem 1\",\n            \"description\": \"\\\"Coverage hole may or may not exist in the network, if an acute triangle is formed by a reference node with its neighbors.\\\" Extracted as it is from [1]\",\n            \"proof\": {\n                \"img\": \"\",\n                \"description\": \"- Due to Lemma 1 we conclude that no coverage hole exists given an acute triangle (T) formed by a reference node (RN) and its one-hop neighbors (X,Y). </br>\" +\n                    \"- Given the results of Lemmas 4 and 7, there are no coverage holes within an acute triangle (T\\') formed by a RN and its two hop neighbors or one of its one-hope neighbors and one two-hop neighbors whenever R <= Rs.\" +\n                    \"- On the other hand, a coverage hole exists given T\\' and R > Rs, this can be derived from the second part of the proofs of Lemmas 4 and 7. </br>\" +\n                    \"- Given these assumptions, Theorem 1 can be proved.\"\n            }\n        },\n        {\n            \"title\": \"Theorem 2\",\n            \"description\": \"\\\"Coverage hole may or may not exist in the network, if an obtuse triangle is formed by a reference node with its neighbors\\\" Extracted as it is from [1]\",\n            \"proof\": {\n                \"img\": \"\",\n                \"description\": \"- Let T be an obtuse triangle formed by a reference node (RN) and its one-hop neighbors (X,Y). </br>\" +\n                    \"- If R <= Rs whe know there isn't a coverage hole as a consequence of Lemma 2.\" +\n                    \"- This also applies if T was an obtuse triangle formed by RN and one of its one-hop neighbors along with one of its two-hope neighbors, meaning there isn't a coverage hole. </br>\" +\n                    \"- On the other hand, if R > Rs, then a coverage hole exists as proved in Lemma3.\",\n            }\n        },\n        {\n            \"title\": \"Theorem 3\",\n            \"description\": \"\\\"Presence or absence of coverage hole in the network depends on the nature of angle formed by a reference node with its neighbors\\\" Extracted as it is from [1]\",\n            \"proof\": {\n                \"img\": \"\",\n                \"description\": \"- Let T be an obtuse triangle formed by a reference node (RN) and its one-hop neighbors (X,Y) </br>\" +\n                    \"- If there is an acute angle at RN and R <= Rs, then there is no coverage hole between RN,X and Y, this can be derived from Lemma 5. </br>\" +\n                    \"- If there is an obtuse angle at RN either with two hop neighbors or one of its one hop neighbor and one two hop neighbor, then there is a coverage hole, this can be derived from Lemma 6.\"\n            }\n        }\n    ],\n};\n","import React, {Component} from 'react';\nimport withStyles from '@material-ui/styles/withStyles';\nimport {withRouter} from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport MathNotation from \"../components/MathNotation\";\n\nimport Topbar from './Topbar';\nimport Lemma1 from \"./dialogs/proofs/Lemma1\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport {DATA_THEO} from \"../data/theo\";\n\nconst numeral = require('numeral');\nnumeral.defaultFormat('0,000');\n\nconst backgroundShape = require('../images/shape.svg');\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.grey['100'],\n        overflow: 'hidden',\n        backgroundSize: 'cover',\n        backgroundPosition: '0 400px',\n        paddingBottom: 200\n    },\n    gridList: {\n        flexWrap: 'nowrap',\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n        transform: 'translateZ(0)',\n    },\n    title: {\n        color: theme.palette.primary.light,\n    },\n    titleBar: {\n        background:\n            'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n    },\n    grid: {\n        width: 1200,\n        marginTop: 40,\n        [theme.breakpoints.down('sm')]: {\n            width: 'calc(100% - 20px)'\n        }\n    },\n    paper: {\n        padding: theme.spacing(3),\n        textAlign: 'left',\n        color: theme.palette.text.secondary,\n    },\n    rangeLabel: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingTop: theme.spacing(2)\n    },\n    topBar: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        marginTop: 32\n    },\n    outlinedButtom: {\n        textTransform: 'uppercase',\n        margin: theme.spacing(1)\n    },\n    actionButtom: {\n        textTransform: 'uppercase',\n        margin: theme.spacing(1),\n        width: 152\n    },\n    blockCenter: {\n        padding: theme.spacing(2),\n        textAlign: 'center'\n    },\n    block: {\n        padding: theme.spacing(2),\n    },\n    box: {\n        marginBottom: 40,\n        height: 65\n    },\n    inlining: {\n        display: 'inline-block',\n        marginRight: 10\n    },\n    buttonBar: {\n        display: 'flex'\n    },\n    alignRight: {\n        display: 'flex',\n        justifyContent: 'flex-end'\n    },\n    noBorder: {\n        borderBottomStyle: 'hidden'\n    },\n    loadingState: {\n        opacity: 0.05\n    },\n    loadingMessage: {\n        position: 'absolute',\n        top: '40%',\n        left: '40%'\n    }\n});\n\nclass TheoreticalAnalysis extends Component {\n\n    state = {\n        loading: true,\n        selectedImage: \"\",\n        selectedTest: \"\",\n        identifier : \"\",\n        modals: {\n            active: false,\n            lemma1: {\n                active: false,\n                content: ''\n            }\n        }\n    };\n\n    componentDidMount() {\n    }\n\n    dialogClose = (lt) => {\n        this.setState({modals: {['lemma1']: {['active']: false}}})\n    };\n\n    openDialog = (axiom) => {\n        console.log(\"Open dialog\");\n        // this.setState({modals: {[lt]: true}})\n        this.setState({\n            modals: {['lemma1']: {['active']: true}},\n            selectedImage: axiom.proof['img'],\n            identifier : axiom['title'],\n            selectedTest: axiom.proof['description'],\n            des : axiom.description\n        })\n    };\n\n    render() {\n        const {classes} = this.props;\n        const currentPath = this.props.location.pathname;\n        const keys = Object.keys(DATA_THEO);\n        return (\n            <React.Fragment>\n                <CssBaseline/>\n                <Topbar currentPath={currentPath}/>\n                <div className={classes.root}>\n                    {\n                        keys.map((key) => (\n                            <Grid container justify=\"center\">\n                                <Grid spacing={4} alignItems=\"center\" justify=\"left\" container className={classes.grid}>\n                                    <Typography color='secondary' variant=\"h4\" gutterBottom>\n                                        {key}\n                                    </Typography>\n                                    <GridList className={classes.gridList} cols={2.5} spacing={20}>\n                                        {DATA_THEO[key].map((axiom, indx) => (\n                                            <GridListTile key={indx}>\n                                                <Paper className={classes.paper}>\n                                                    <div>\n                                                        <div className={classes.box}>\n                                                            <Typography color='secondary' gutterBottom>\n                                                                {axiom.title}\n                                                            </Typography>\n                                                            <Typography variant=\"body1\" gutterBottom>\n                                                                { axiom.description}\n                                                            </Typography>\n                                                        </div>\n                                                        {\n                                                            axiom['proof'] && (\n                                                                <div className={classes.alignRight}>\n                                                                    <Button color='primary' variant=\"contained\"\n                                                                            className={classes.actionButtom}\n                                                                            onClick={() => {\n                                                                                this.openDialog(axiom)\n                                                                            }}\n                                                                    >\n                                                                        Proof!\n                                                                    </Button>\n                                                                </div>\n                                                            )\n                                                        }\n                                                        <div style={{paddingTop: 8}}></div>\n                                                    </div>\n                                                </Paper>\n                                            </GridListTile>\n                                        ))}\n                                    </GridList>\n                                </Grid>\n                            </Grid>\n                        ))\n                    }\n                    <Lemma1\n                        open={this.state.modals.lemma1.active}\n                        identifier={this.state.identifier}\n                        img={this.state.selectedImage}\n                        des={this.state.des}\n                        description={this.state.selectedTest}\n                        onClose={this.dialogClose}/>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default withRouter(withStyles(styles)(TheoreticalAnalysis));\n","import {squareDistanceBetweenPoints} from \"../utils/geometryUtils\";\n\nexport let timesClicked = 0;\n\nfunction checkClickInside(mouseX, mouseY, canvasWidth, canvasHeight) {\n    return mouseX > 0 && mouseX < canvasWidth && mouseY > 0 && mouseY < canvasHeight\n}\n\nexport default function sketch(p) {\n    let div1 = document.getElementById(\"paper\");\n    let div2 = document.getElementById(\"gridWidth\");\n    const padding = 0;\n    const height = 450;\n    const width = div2.offsetWidth;\n    p.setup = function () {\n\n        console.log(\"div1 width\");\n        console.log(width - padding);\n        // p.createCanvas(div1.offsetWidth, div1.offsetHeight);\n        p.createCanvas(width - padding, height);\n        p.fill('black');\n        // let canvas = p.createCanvas(canvasWidth, canvasHeight);\n        // canvas.parent('sketchH1');\n    };\n\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n        console.log(\"myCustomRedrawAccordingToNewPropsHandler\");\n        console.log(props);\n        if (props.getCoords) {\n            p.sendCoords = props.getCoords;\n        }\n        if (props.nodes) {\n            p.nodes = props.nodes\n        }\n        if (props.addingNodes !== undefined) {\n            p.addingNodes = props.addingNodes\n        }\n        if (props.addingNeighbors !== undefined) {\n            p.addingNeighbors = props.addingNeighbors\n        }\n        if (props.circumCenter) {\n            p.circumCenter = props.circumCenter\n        }\n        if(props.sensingRate){\n            p.sensingRange = props.sensingRate\n        }\n    };\n\n    p.draw = function () {\n        p.background(200);\n        if (p.nodes) {\n            p.nodes.forEach((node, i) => {\n                if (node.active) {\n                    p.ellipse(node.x, node.y, 6, 6);\n                    p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    p.stroke('black');\n                    p.fill('rgba(0,255,0, 0.25)');\n\n                    p.circle(node.x, node.y, p.sensingRange * 2);\n                    if (node.isReference) {\n                        p.fill('rgba(163, 255, 232, 0.25)');\n                        p.circle(node.x, node.y, 2 * p.sensingRange * 2)\n                    }\n                    if (node.coverageHolesAroundNode.length > 0) {\n                        // console.log(\"coverage holes!!!\")\n                        node.coverageHolesAroundNode.forEach((val, index) => {\n                            p.ellipse(val.x, val.y, 6, 6);\n                            p.text('cc: ' + index + '', val.x - 16, val.y + 15);\n                        })\n                    }\n                } else {\n                    p.ellipse(node.x, node.y, 6, 6);\n                    p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    p.stroke('black');\n                    p.fill('rgba(255,0,0, 0.25)');\n                    p.circle(node.x, node.y, p.sensingRange * 2);\n                }\n            });\n        }\n        if (p.circumCenter) {\n            // p.ellipse(p.circumCenter.x, p.circumCenter.y, 6, 6);\n            // p.text('Circum center', p.circumCenter.x - 16, p.circumCenter.y + 15);\n        }\n    };\n\n    p.mousePressed = function () {\n        if (checkClickInside(p.mouseX, p.mouseY, width - padding, height)) {\n            p.sendCoords(p.mouseX, p.mouseY);\n        }\n    };\n\n    p.windowResized = function () {\n        const padding = 0;\n        const height = 450;\n        const width = div2.offsetWidth;\n        p.resizeCanvas(width - padding, height);\n    }\n};\n","export const GET_NODES = 'GET_NODES';\nexport const GET_SENSING_RATE = 'GET_SENSING_RATE';\nexport const ADD_NODE = 'ADD_NODE';\nexport const ADDING_NODES = 'ADDING_NODES';\nexport const ADDING_NEIGHBORS = 'ADDING_NEIGHBORS';\nexport const NEIGHBOR_DISCOVERY_PHASE = 'NEIGHBOR_DISCOVERY_PHASE';\nexport const COVERAGE_HOLE_DETECTION_PHASE = 'COVERAGE_HOLE_DETECTION_PHASE';\nexport const ADD_SENSING_RATE = 'ADD_SENSING_RATE';\nexport const ADD_COVERAGE_HOLE = 'ADD_COVERAGE_HOLE';\nexport const SET_REFERENCE_NODES = 'SET_REFERENCE_NODES';\nexport const SET_REFERENCE = 'SET_REFERENCE';\nexport const SET_NEIGHBORS = 'SET_NEIGHBORS';\nexport const ADD_NODE_ONE_HOPE_NEIGHBORS = 'ADD_NODE_ONE_HOPE_NEIGHBORS';\nexport const ADD_NODE_TWO_HOPE_NEIGHBORS = 'ADD_NODE_TWO_HOPE_NEIGHBORS';\nexport const DRAW_CIRCUM_CENTER = 'DRAW_CIRCUM_CENTER';\nexport const RESET = 'RESET';\n\nexport const reset = () => ({\n    type: RESET,\n});\n\nexport const getNodes = () => ({\n    type: GET_NODES,\n});\n\nexport const getSensingRate = sensingRate => ({\n    type: GET_SENSING_RATE,\n    sensingRate\n});\n\nexport const addNodeCreator = node => ({\n    type: ADD_NODE,\n    node\n});\n\nexport const addingNodesCreator = () => ({\n    type: ADDING_NODES\n});\nexport const addingNeighborsCreator = () => ({\n    type: ADDING_NEIGHBORS\n});\n\nexport const neighborDiscoveryPhaseCreator = () => ({\n    type: NEIGHBOR_DISCOVERY_PHASE\n});\n\nexport const coverageHoleDetectionPhaseCreator = () => ({\n    type: COVERAGE_HOLE_DETECTION_PHASE\n});\n\nexport const addSensingRateCreator = sensingRate => ({\n    type: ADD_SENSING_RATE,\n    sensingRate\n});\n\nexport const addCoverageHole = (referenceNode, hole) => ({\n    type: ADD_COVERAGE_HOLE,\n    referenceNode,\n    hole\n});\n\nexport const setReferenceNodesCreator = nodes => ({\n    type: SET_REFERENCE_NODES,\n    referenceNodes: nodes\n});\n\nexport const addNodeOneHopeNeighborCreator = (node, neighbors) => ({\n    type: ADD_NODE_ONE_HOPE_NEIGHBORS,\n    referenceNode: node,\n    neighbors\n});\n\nexport const addNodeTwoHopeNeighborCreator = (node, neighbors) => ({\n    type: ADD_NODE_TWO_HOPE_NEIGHBORS,\n    referenceNode: node,\n    neighbors\n});\n\nexport const setReferenceCreator = (node) => ({\n    type: SET_REFERENCE,\n    referenceNode: node,\n});\nexport const drawCircumCenterCreator = (node) => ({\n    type: DRAW_CIRCUM_CENTER,\n    circumCenter: node,\n});\n\n","import React, {Component} from 'react';\nimport withStyles from '@material-ui/styles/withStyles';\nimport Paper from '@material-ui/core/Paper';\nimport P5Wrapper from 'react-p5-wrapper';\nimport sketch from '../../sketches/sketch';\nimport {connect} from \"react-redux\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport {bindActionCreators} from \"redux\";\nimport * as demoActions from \"../../actions/demo\";\nimport {\n    distanceBetweenTwoPoints,\n    Node, nodesThatListenedMessageWithRespectToRadius, Point\n} from \"../../utils/geometryUtils\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from '@material-ui/core/Slider';\nimport Grid from \"@material-ui/core/Grid\";\nimport TriangleSketch from \"../../sketches/Triangle\";\nimport Button from \"@material-ui/core/Button\";\n\nconst marks = [\n    {\n        value: 10,\n        label: '0°C',\n    },\n    {\n        value: 20,\n        label: '20°C',\n    },\n    {\n        value: 30,\n        label: '37°C',\n    },\n    {\n        value: 40,\n        label: '100°C',\n    },\n];\n\nconst styles = theme => ({\n    paper: {\n        padding: theme.spacing(3),\n        textAlign: 'left',\n        color: theme.palette.text.secondary\n    },\n    itemContainer: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        [theme.breakpoints.down('sm')]: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center'\n        }\n    },\n    baseline: {\n        alignSelf: 'baseline',\n        marginLeft: theme.spacing(4),\n        [theme.breakpoints.down('sm')]: {\n            display: 'flex',\n            flexDirection: 'column',\n            textAlign: 'center',\n            alignItems: 'center',\n            width: '100%',\n            marginTop: theme.spacing(2),\n            marginBottom: theme.spacing(2),\n            marginLeft: 0\n        }\n    },\n    inline: {\n        display: 'inline-block',\n        marginLeft: theme.spacing(4),\n        [theme.breakpoints.down('sm')]: {\n            marginLeft: 0\n        }\n    },\n    inlineRight: {\n        width: '30%',\n        textAlign: 'right',\n        marginLeft: 50,\n        alignSelf: 'flex-end',\n        [theme.breakpoints.down('sm')]: {\n            width: '100%',\n            margin: 0,\n            textAlign: 'center'\n        }\n    },\n    backButton: {\n        marginRight: theme.spacing(2)\n    }\n});\n\nfunction valuetext(value) {\n    return `${value}°C`;\n}\n\nclass SimulatorContainer extends Component {\n    onChangeSlider = (e, val) => {\n        console.log(\"On change slider\");\n        console.log(val);\n        this.props.addSensingRateCreator(val);\n        this.props.getNeighbors()\n    };\n    getCoords = (x, y) => {\n        if (this.props.addingNodes) {\n            this.props.addNodeCreator(new Node(x, y, this.props.nodes.length))\n        }\n        if (this.props.addingNeighbors) {\n            let point = new Point(x, y);\n            let min = 1000000000;\n            let i = 0;\n            let indexReference = -2;\n            this.props.nodes.forEach((node, index) => {\n                if (node.isReference) {\n                    indexReference = index\n                }\n                const distance = distanceBetweenTwoPoints(node, point);\n                if (distance < min) {\n                    min = distance;\n                    i = index\n                }\n            });\n            if (indexReference !== -2) {\n                this.props.setReferenceCreator(indexReference);\n            }\n            if (min < 20) {\n                this.props.setReferenceCreator(i)\n                this.props.getNeighbors()\n            }\n        }\n    };\n\n\n    componentDidMount() {\n    }\n\n    render() {\n        const {classes, referenceNodes, nodes} = this.props;\n        const refNode = nodes[referenceNodes];\n        console.log(\"Ref node\");\n        console.log(refNode);\n\n        let instruction = '';\n        if (this.props.addingNodes) {\n            instruction = \"Click on screen to start adding nodes\"\n        } else if (this.props.addingNeighbors) {\n            instruction = \"Click on a node to set it as reference\"\n        } else {\n            instruction = \"\"\n        }\n\n        return (\n            <div className={classes.root}>\n                <Paper className={classes.paper} id={'paper'}>\n\n                    <Typography color='secondary' variant=\"h6\" gutterBottom>\n                        {instruction}\n                    </Typography>\n\n                    <Grid container justify=\"center\">\n                        <Grid spacing={7} alignItems=\"center\" justify=\"center\" container>\n                            <Grid container item xs={12}>\n                                <Grid item xs={9} id={'gridWidth'}>\n                                    <P5Wrapper sketch={sketch}\n                                               getCoords={this.getCoords}\n                                               nodes={this.props.nodes}\n                                               sensingRate={this.props.sensingRate}\n                                               addingNodes={this.props.addingNodes}\n                                               addingNeighbors={this.props.addingNeighbors}\n                                               circumCenter={this.props.circumCenter}/>\n                                </Grid>\n                                <Grid style={{paddingLeft: 10}} item xs={3}>\n                                    <div style={{width: 300}}>\n                                        <Typography color='secondary' variant=\"h6\" gutterBottom>\n                                            Sensing rate\n                                        </Typography>\n                                        <Slider\n                                            defaultValue={this.props.sensingRate}\n                                            getAriaValueText={valuetext}\n                                            aria-labelledby=\"discrete-slider\"\n                                            valueLabelDisplay=\"auto\"\n                                            onChangeCommitted={this.onChangeSlider}\n                                            step={10}\n                                            marks\n                                            min={10}\n                                            max={110}\n                                        />\n                                        <Typography color='secondary' variant=\"h6\" gutterBottom>\n                                            Reference Node:\n                                        </Typography>\n                                        {\n                                            referenceNodes === -1 && (\n                                                <Typography variant=\"body1\" gutterBottom>\n                                                    Not Selected\n                                                </Typography>\n                                            )\n                                        }\n                                        {\n                                            referenceNodes >= 0 && (\n                                                <div>\n                                                    <Typography variant=\"body1\" gutterBottom>\n                                                        Node {refNode.id}\n                                                    </Typography>\n                                                    <Typography variant=\"body1\" gutterBottom>\n                                                        One hop- Neighbors : {refNode.oneHopeNeighbors}\n                                                    </Typography>\n                                                    <Typography variant=\"body1\" gutterBottom>\n                                                        Two hop- Neighbors : {refNode.twoHopeNeighbors}\n                                                    </Typography>\n                                                    <Button style={{textAlign: 'left'}} color='primary' variant=\"text\" size=\"small\">\n                                                        Get coverage holes around reference node\n                                                    </Button>\n                                                </div>\n\n                                            )\n                                        }\n                                    </div>\n\n                                </Grid>\n                            </Grid>\n\n                        </Grid>\n                    </Grid>\n\n\n                </Paper>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        nodes: state.demo.nodes,\n        sensingRate: state.demo.sensingRate,\n        addingNodes: state.demo.addingNodes,\n        addingNeighbors: state.demo.addingNeighbors,\n        circumCenter: state.demo.circumCenter,\n        referenceNodes: state.demo.referenceNodes,\n        neighborDiscoveryPhase: state.demo.neighborDiscoveryPhase\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({...demoActions}, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(withStyles(styles)(SimulatorContainer)))\n","import React, {Component} from 'react';\nimport withStyles from '@material-ui/styles/withStyles';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport HelpIcon from '@material-ui/icons/Help';\nimport SettingsInputAntennaIcon from '@material-ui/icons/SettingsInputAntenna';\nimport AddIcon from '@material-ui/icons/Add';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport StopIcon from '@material-ui/icons/Stop';\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router-dom\";\nimport {bindActionCreators} from \"redux\";\nimport * as demoActions from \"../../actions/demo\";\nimport green from '@material-ui/core/colors/green';\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport {ThemeProvider as MuiThemeProvider} from '@material-ui/core/styles';\nimport {red} from \"@material-ui/core/colors\";\nimport SignalWifiOffIcon from '@material-ui/icons/SignalWifiOff';\n\n\nconst styles = theme => ({\n    paper: {\n        padding: theme.spacing(2.5),\n        textAlign: 'left',\n        color: theme.palette.text.secondary\n    },\n    outlinedButtom: {\n        textTransform: 'uppercase',\n        margin: theme.spacing(1)\n    },\n    itemContainer: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        [theme.breakpoints.down('sm')]: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center'\n        }\n    },\n    baseline: {\n        alignSelf: 'baseline',\n        marginLeft: theme.spacing(3),\n        [theme.breakpoints.down('sm')]: {\n            display: 'flex',\n            flexDirection: 'column',\n            textAlign: 'center',\n            alignItems: 'center',\n            width: '100%',\n            marginTop: theme.spacing(2),\n            marginBottom: theme.spacing(2),\n            marginLeft: 0\n        }\n    },\n    inline: {\n        display: 'inline-block',\n        // marginLeft: theme.spacing(4),\n        [theme.breakpoints.down('sm')]: {\n            marginLeft: 0\n        }\n    },\n    inlineRight: {\n        width: '30%',\n        textAlign: 'right',\n        marginLeft: 50,\n        alignSelf: 'flex-end',\n        [theme.breakpoints.down('sm')]: {\n            width: '100%',\n            margin: 0,\n            textAlign: 'center'\n        }\n    },\n    backButton: {\n        marginRight: theme.spacing(2)\n    }\n});\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: green,\n        secondary: red\n    },\n});\n\n\nclass TopButtonBar extends Component {\n    handleAddNodes = () => {\n        this.props.handleAddNodes()\n    };\n    handleSimulation = () => {\n        this.props.handleSimulation()\n    };\n    handleNeighbors = () => {\n        this.props.handleNeighbor()\n    };\n    handleCoverageHole = () => {\n        this.props.handleCoverage()\n    };\n    handleNodeError = () => {\n        this.props.handleNodeError()\n    };\n    handleHelp = () => {\n        this.props.handleHelp()\n    };\n\n\n    componentDidMount() {\n        console.log(\"TOP BUTTON BAR\");\n        console.log(this.props)\n    }\n\n    render() {\n        console.log(\"RENDER TOP BUTTON BAR COMPONENT\");\n        const {classes, neighborDiscoveryPhase, addingNodes, nodes, addingNeighbors} = this.props;\n        const areThereReferenceNodes = nodes.filter((val) => val.isReference).length > 0;\n        console.log(\"NEIGHBOR DISCOVERY PHASE\");\n        console.log(neighborDiscoveryPhase);\n\n        return (\n            <div className={classes.root}>\n                <Paper className={classes.paper}>\n                    <div className={classes.itemContainer}>\n                        <div className={classes.baseline}>\n                            <div className={classes.inline}>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"secondary\"\n                                    disabled={neighborDiscoveryPhase}\n                                    onClick={this.handleAddNodes}\n                                    className={classes.outlinedButtom}\n                                    startIcon={!addingNodes ? <AddIcon/> : <StopIcon/>}\n                                >\n                                    Create Nodes\n                                </Button>\n                            </div>\n                            <div className={classes.inline}>\n                                <MuiThemeProvider theme={theme}>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        disabled={addingNodes || neighborDiscoveryPhase || addingNeighbors || !areThereReferenceNodes}\n                                        onClick={this.handleSimulation}\n                                        className={classes.outlinedButtom}\n                                        startIcon={<PlayArrowIcon/>}\n                                    >\n                                        Start simulation\n                                    </Button>\n                                </MuiThemeProvider>\n\n                            </div>\n                            <div className={classes.inline}>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"secondary\"\n                                    onClick={this.handleCoverageHole}\n                                    disabled={addingNodes || neighborDiscoveryPhase || !areThereReferenceNodes || addingNeighbors}\n                                    className={classes.outlinedButtom}\n                                    startIcon={<SettingsInputAntennaIcon/>}\n                                >\n                                    Find Coverage Holes\n                                </Button>\n                            </div>\n                            <div className={classes.inline}>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    onClick={this.handleNeighbors}\n                                    disabled={addingNodes || nodes.length === 0}\n                                    className={classes.outlinedButtom}\n                                    startIcon={!addingNeighbors ? <PersonAddIcon/> : <StopIcon/>}\n                                >\n                                    Neighbor Discovery\n                                </Button>\n                            </div>\n                            <div className={classes.inline}>\n                                <MuiThemeProvider theme={theme}>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        onClick={this.handleNodeError}\n                                        disabled={addingNodes || addingNeighbors ||neighborDiscoveryPhase || nodes.length === 0}\n                                        className={classes.outlinedButtom}\n                                        startIcon={<SignalWifiOffIcon/>}\n                                    >\n                                        Node error\n                                    </Button>\n                                </MuiThemeProvider>\n                            </div>\n                            <div className={classes.inline}>\n                                <Button\n                                    variant=\"contained\"\n                                    size=\"medium\"\n                                    color=\"default\"\n                                    onClick={this.handleHelp}\n                                    className={classes.outlinedButtom}\n                                    startIcon={<HelpIcon/>}\n                                >\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n                </Paper>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        nodes: state.demo.nodes,\n        sensingRate: state.demo.sensingRate,\n        addingNodes: state.demo.addingNodes,\n        addingNeighbors: state.demo.addingNeighbors,\n        neighborDiscoveryPhase: state.demo.neighborDiscoveryPhase\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({...demoActions}, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(withStyles(styles)(TopButtonBar)))\n","import React, { Component } from 'react';\nimport withStyles from '@material-ui/styles/withStyles';\nimport Typography from '@material-ui/core/Typography';\nimport { withRouter } from 'react-router-dom';\n\nconst styles = theme => ({\n  sectionContainer: {\n    marginBottom: theme.spacing(2),\n      marginLeft: 10\n  },\n  title: {\n    fontWeight: 'bold'\n  }\n});\n\nclass SectionHeader extends Component {\n  render() {\n    const { classes, title, subtitle} = this.props;\n    return (\n      <div className={classes.sectionContainer}>\n        <Typography variant=\"subtitle1\" className={classes.title}>\n          {title}\n        </Typography>\n        <Typography variant=\"body1\" gutterBottom>\n          {subtitle}\n        </Typography>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(withStyles(styles)(SectionHeader));\n","import React, {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\nimport withStyles from '@material-ui/styles/withStyles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport BaseDialog from './BaseDialog';\nimport SwipeableViews from 'react-swipeable-views';\nimport {autoPlay} from 'react-swipeable-views-utils';\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport SettingsInputAntennaIcon from '@material-ui/icons/SettingsInputAntenna';\nimport List from \"@material-ui/core/List\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport {bindActionCreators} from \"redux\";\nimport * as demoActions from \"../../actions/demo\";\nimport {connect} from \"react-redux\";\n\nconst logo = require('../../images/logo.svg');\n\nconst AutoPlaySwipeableViews = autoPlay(SwipeableViews);\n\n\nconst styles = theme => ({\n    container: {\n        maxWidth: 600,\n        maxHeight: 300,\n        flexGrow: 1,\n        textAlign: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    stepsContainer: {\n        marginLeft: 72,\n        textAlign: 'left',\n        marginTop: 20,\n        height: 65\n    },\n    bottomMargin: {\n        marginBottom: theme.spacing(2)\n    }\n});\n\nclass SwipeDialog extends Component {\n\n    handleNext = () => {\n        this.setState(prevState => ({\n            activeStep: prevState.activeStep + 1,\n        }));\n    };\n\n    handleBack = () => {\n        this.setState(prevState => ({\n            activeStep: prevState.activeStep - 1,\n        }));\n    };\n\n    handleStepChange = activeStep => {\n        this.setState({activeStep});\n    };\n\n    handleClose = () => {\n        this.props.onClose()\n    };\n\n    handleCloseOk = () => {\n        this.props.onOk()\n    };\n\n    state = {\n        checked: this.props.nodes ? this.props.nodes.filter((val) => val.isReference).map((val, index) => index) : []\n    };\n\n    handleToggle = index => () => {\n        this.props.setReferenceCreator(index);\n        this.forceUpdate(); // Calling force update since the component was not being re rendered when calling set Reference\n\n    };\n\n\n    render() {\n        const {classes} = this.props;\n        const nodes = this.props.nodes ? this.props.nodes : []\n        console.log(\"RENDER!!! DIALOG\");\n\n\n        return (\n            <BaseDialog {...this.props}>\n                <div className={classes.container}>\n                    <div>\n                        <Typography variant=\"h5\" gutterBottom>\n                            Choose a reference node\n                        </Typography>\n                        <List dense className={classes.root}>\n                            {nodes.map((value, index) => {\n                                const labelId = `checkbox-list-secondary-label-${value}`;\n                                return (\n                                    <ListItem key={index} button>\n                                        <ListItemIcon>\n                                            <SettingsInputAntennaIcon/>\n                                        </ListItemIcon>\n                                        <ListItemText id={labelId} primary={`Node ${index + 1}`}/>\n                                        <ListItemSecondaryAction>\n                                            <Checkbox\n                                                edge=\"end\"\n                                                onChange={this.handleToggle(index)}\n                                                checked={value.isReference}\n                                                inputProps={{'aria-labelledby': labelId}}\n                                            />\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                );\n                            })}\n                        </List>\n                        <Button autoFocus onClick={this.handleClose} color=\"default\">\n                            Cancel\n                        </Button>\n                        <Button onClick={this.handleCloseOk} color=\"primary\">\n                            Ok\n                        </Button>\n                    </div>\n                </div>\n            </BaseDialog>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        nodes: state.demo.nodes,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({...demoActions}, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(withStyles(styles)(SwipeDialog)))\n","import React, {Component} from 'react';\nimport withStyles from '@material-ui/styles/withStyles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport SimulatorContainer from './simulator/SimulatorContainer';\nimport TopButtonBar from './simulator/TopButtonBar';\nimport Topbar from './Topbar';\nimport SectionHeader from './typo/SectionHeader';\nimport {bindActionCreators} from \"redux\";\nimport * as demoActions from \"../actions/demo\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router-dom\";\nimport {getCombinations, joinArrays} from \"../utils/generalUtils\";\nimport {\n    checkPointInsideCircle,\n    nodesThatCoverCircumCenter,\n    nodesThatListenedMessageWithRespectToRadius, Point, Triangle\n} from \"../utils/geometryUtils\";\nimport SwipeDialog from \"./dialogs/SwipeDialog\";\n\nconst backgroundShape = require('../images/shape.svg');\n\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.grey['A500'],\n        overflow: 'hidden',\n        // background: `url(${backgroundShape}) no-repeat`,\n        // backgroundSize: 'cover',\n        // backgroundPosition: '0 400px',\n        // marginTop: 20,\n        padding: 10,\n        // paddingBottom: 200\n    },\n    grid: {},\n    gridSide: {\n        marginLeft: 10,\n        marginBottom: theme.spacing(4),\n        width: 500\n    }\n});\n\nclass Demo extends Component {\n    state = {\n        learnMoredialog: false\n    };\n\n    openDialog = (event) => {\n        this.setState({learnMoredialog: true});\n    };\n    dialogClose = (event) => {\n        this.setState({learnMoredialog: false});\n    };\n\n    dialogCloseOk = (referenceNodes) => {\n        this.setState({learnMoredialog: false});\n        this.getNeighbors()\n    };\n\n    handleAddNodes = () => {\n        console.log(\"Handle Add Nodess\");\n        this.props.addingNodesCreator();\n        // this.props.addNodeCreator(new Node(469.4566699123661, 244.0703125, 0, 80, true, true));\n        // this.props.addNodeCreator(new Node(413.4021421616358, 224.0703125, 1, 80, false));\n        // this.props.addNodeCreator(new Node(374.36416747809153, 138.0703125, 2));\n        // this.props.addNodeCreator(new Node(577.5618305744888, 196.0703125, 3));\n        // this.props.addNodeCreator(new Node(588.572541382668, 305.0703125, 4));\n        // this.props.addNodeCreator(new Node(484.47127555988317, 361.0703125, 5));\n        // this.props.addNodeCreator(new Node(346.3369036027264, 327.0703125, 6));\n        // this.props.addNodeCreator(new Node(316.3076923076923, 261.0703125, 7));\n    };\n\n    handleStartSimulation = () => {\n        // this.props.addingNodesCreator();\n        console.log(\"Start simulation\")\n    };\n\n    handleNeighborPhase = () => {\n        // this.props.addingNodesCreator();\n        console.log(\"Handle neighbor phase\");\n        this.props.addingNeighborsCreator();\n        // this.openDialog()\n    };\n\n    handleCoverageDetectionPhase = () => {\n        // this.props.addingNodesCreator();\n        console.log(\"Handle coverage hole phase\");\n        this.coverageHoleDetection()\n    };\n\n    handleNodeError = () => {\n        // this.props.addingNodesCreator();\n        console.log(\"Handle node error\");\n    };\n\n    handleHelp = () => {\n        // this.props.addingNodesCreator();\n        console.log(\"Handle help\");\n    };\n\n    getNeighbors = () => {\n        this.props.neighborDiscoveryPhaseCreator();\n        console.log(\"Well, are you ready to rumble?, don't forget single responsibility\");\n        const nodes = this.props.nodes.filter((val) => val.active);\n        const referenceNodes = nodes.filter((val) => val.isReference).map((valM) => valM.id);\n        console.log(\"In this part we will iterate over the reference nodes to init the process of get Neighbor phase, for performance purposes we will do it for only one reference node\");\n        console.log(\"There are two ways of finding one and two hope neighbors\");\n        console.log();\n        referenceNodes.forEach((referenceNode) => {\n            console.log(\"We iterate for every node that is not the reference node and we send a message\");\n            console.log(\"Nodes that listened to my message :)\");\n            const message = \"HELLO!!\";\n            const {oneHopeNeighbors, twoHopeNeighbors} = nodesThatListenedMessageWithRespectToRadius(referenceNode, nodes, this.props.sensingRate);\n            console.log(\"Just for testing purposes, let's see the union\");\n            const union = joinArrays(oneHopeNeighbors, twoHopeNeighbors);\n            console.log(union);\n            this.props.addNodeOneHopeNeighborCreator(referenceNode, oneHopeNeighbors);\n            this.props.addNodeTwoHopeNeighborCreator(referenceNode, twoHopeNeighbors)\n        });\n        this.props.neighborDiscoveryPhaseCreator();\n    };\n\n    findHoleBetweenReferenceNodeAndPairNeighbors = (referenceNode, Ai, Aj) => {\n\n        const triangle = new Triangle(referenceNode, Ai, Aj);\n        const {nodes, sensingRate} = this.props;\n        console.log(\"--------------------------------------------\");\n        console.log(\"Triangle between reference node and points:\");\n        console.log(referenceNode.id);\n        console.log(Ai.id);\n        console.log(Aj.id);\n        console.log(\"--------------------------------------------\");\n        // Step 8: Compute circum radius R and circum center Z of triangle XAiAj;\n        const R = triangle.getCircumRadius();\n        const Z = triangle.getCircumCenter();\n        console.log(\"Circum center: \", Z);\n        console.log(\"Circum Raduis: \", R);\n        console.log(\"Sensing rate: \", sensingRate);\n        this.props.drawCircumCenterCreator(Z);\n        this.props.addCoverageHole(referenceNode.id, Z);\n        // Step 9: Verify if XAiAj is an acute or obtuse triangle;\n        const isObtuse = triangle.isObtuse();\n        const isAcute = triangle.isAcute();\n\n        // Step 10: If (X forms an acute triangle with its neighbors Ai and Aj)\n        if (isAcute) {\n            if (R < sensingRate) {\n                console.log(\"%cNo hole exists around the reference node \" + referenceNode.id + \"\", \"color: green; font-size:15px;\")\n            } else {\n                console.log(\"%cThere exists a hole around the reference node \" + referenceNode.id + \"\", \"color: red; font-size:15px;\");\n                this.props.addCoverageHole(referenceNode.id, Z);\n            }\n        }\n        if (isObtuse) {\n            if (R < sensingRate) {\n                console.log(\"%cNo hole exists around the reference node \" + referenceNode.id + \"\", \"color: green; font-size:15px;\")\n            } else {\n                // Check if circum center Z is covered by any other sensor\n                let noHoleDetected = nodesThatCoverCircumCenter(Z, nodes, sensingRate).length > 0;\n                if (noHoleDetected) {\n                    console.log(\"No hole exists around the reference node \" + referenceNode.id + \"\", \"color: green; font-size:15px;\")\n                } else {\n                    console.log(\"%cThere exists a hole around the reference node \" + referenceNode.id + \"\", \"color: red; font-size:15px;\");\n                    this.props.addCoverageHole(referenceNode.id, Z);\n                }\n            }\n        }\n\n    };\n\n    coverageHoleDetection = () => {\n        let i = 0;\n        this.props.coverageHoleDetectionPhaseCreator();\n        const nodes = this.props.nodes.filter((node) => node.active);\n        // Step 1: Select any node X randomly as a reference node;\n        const referenceNodes = nodes.filter((val) => val.isReference).map((valM) => valM.id);\n        const X = referenceNodes[0];\n        // Step 2: Find one and two-hop neighbors of X;\n        const {oneHopeNeighbors, twoHopeNeighbors} = nodesThatListenedMessageWithRespectToRadius(X, nodes, this.props.sensingRate);\n        // Assign those nodes to set N\n        const N = joinArrays(oneHopeNeighbors, twoHopeNeighbors);\n        const nodeX = nodes[X];\n\n        // Step 3: Select nodes from set N whose y-coordinate >= b; Assign those nodes to set Nu\n        const N_u = N.map((val) => nodes[val]).filter((val) => val.y <= nodeX.y);\n\n        // Step 4: Arrange nodes of Nu with their x-coordinate in ascending order and put them in a new set Nux,\n        const N_uX = N_u.sort(function (a, b) {\n            return a.x - b.x\n        });\n        const firstN_uX = N_uX.length > 0 ? N_uX[0] : 0;\n\n        // Step 5: Select nodes from set N whose y-coordinate < b; Assign those nodes to set Nd;\n        const N_d = N.map((val) => nodes[val]).filter((val) => val.y > nodeX.y);\n\n        // Step 6: Arrange nodes of Nd with their x-coordinate in descending order and put them in a new set Ndx\n        const N_dX = N_d.sort(function (a, b) {\n            return b.x - a.x\n        });\n        const combiNUx = getCombinations(N_u, 2);\n        console.log(\"combiNUx\");\n        console.log(combiNUx);\n\n        // Step 7: Select 1st two nodes Ai and Aj from Nux such that x-coordinate of Ai < Aj\n        let isFirstTime = true;\n        if (N_uX.length >= 2) {\n            do {\n                console.log(\"Entro!!\");\n                let Ai = N_uX[0];\n                let Aj = N_uX[1];\n                this.findHoleBetweenReferenceNodeAndPairNeighbors(nodeX, Ai, Aj);\n                // Step 13: Update Nux’Nux􏰁fAig\n                N_uX.shift();\n                const whileCond = N_uX.length !== 1;\n                i++;\n            } while (N_uX.length !== 1);\n        } else {\n            console.log(\"X\");\n            console.log(nodeX);\n            const Z = new Point(0, 0);\n            console.log(\"%cThere exists a hole around the reference node \" + nodeX.id + \"\", \"color: red; font-size:15px;\");\n            this.props.addCoverageHole(nodeX.id, Z);\n        }\n\n        // Step 14: Choose the 1st node Ai of Ndx and last balance node Aj of Nux;\n        if (N_dX.length > 0) {\n            do {\n                let Ai = 0;\n                let Aj = 0;\n                if (isFirstTime && N_uX.length > 0) {\n                    Ai = N_dX[0];\n                    Aj = N_uX[0];\n                    this.findHoleBetweenReferenceNodeAndPairNeighbors(nodeX, Ai, Aj);\n                } else if (N_dX.length > 1) {\n                    Ai = N_dX[0];\n                    Aj = N_dX[1];\n                    this.findHoleBetweenReferenceNodeAndPairNeighbors(nodeX, Ai, Aj);\n                }\n\n                if (isFirstTime) {\n                    isFirstTime = false\n                } else {\n                    N_dX.shift()\n                }\n\n\n            } while (N_dX.length !== 1);\n        }\n        if (N_dX.length > 0) {\n            this.findHoleBetweenReferenceNodeAndPairNeighbors(nodeX, N_dX[0], firstN_uX);\n        }\n\n\n        this.props.coverageHoleDetectionPhaseCreator();\n    };\n\n\n    componentDidMount() {\n        console.log(\"DEMO COMPONENT\");\n        this.props.reset();\n    }\n\n\n    render() {\n        console.log(\"RE RENDER COMPONENT DEMO\");\n        const {classes} = this.props;\n        const currentPath = this.props.location.pathname;\n\n        return (\n            <React.Fragment>\n                <CssBaseline/>\n                <Topbar currentPath={currentPath}/>\n                <div className={classes.root}>\n                    <Grid container direction=\"row\" justify=\"center\" spacing={2}>\n                        <Grid spacing={24} alignItems=\"center\" justify=\"center\" container className={classes.grid}>\n                            <Grid item xs={12} id={'gridNetworks'}>\n                                <TopButtonBar\n                                    handleAddNodes={this.handleAddNodes}\n                                    handleSimulation={this.handleStartSimulation}\n                                    handleNeighbor={this.handleNeighborPhase}\n                                    handleCoverage={this.handleCoverageDetectionPhase}\n                                    handleNodeError={this.handleNodeError}\n                                    handleHelp={this.handleHelp}\n                                    learnMoredialog={this.state.learnMoredialog}\n                                />\n                            </Grid>\n                            <Grid item xs={12} id={'gridNetworks'}>\n                                <SimulatorContainer getNeighbors={this.getNeighbors}/>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <SwipeDialog\n                        open={this.state.learnMoredialog}\n                        onClose={this.dialogClose}\n                        onOk={this.dialogCloseOk}/>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        nodes: state.demo.nodes,\n        sensingRate: state.demo.sensingRate,\n        addingNodes: state.demo.addingNodes,\n        addingNeighbors: state.demo.addingNeighbors,\n        neighborDiscoveryPhase: state.demo.neighborDiscoveryPhase,\n        referenceNode : state.demo.referenceNodes\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({...demoActions}, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(withStyles(styles)(Demo)))\n\n","import {squareDistanceBetweenPoints} from \"../utils/geometryUtils\";\nimport {\n    Node\n} from \"../utils/geometryUtils\";\n\nfunction checkClickInside(mouseX, mouseY, canvasWidth, canvasHeight) {\n    return mouseX > 0 && mouseX < canvasWidth && mouseY > 0 && mouseY < canvasHeight\n}\n\nexport default function sketch_ch_definition(p) {\n    const sensingRate = 40;\n    const padding = 20;\n    let nodes = [\n        new Node(100-padding, 80, 0, sensingRate),\n        new Node(100-padding, 140, 1, sensingRate),\n        new Node(160-padding, 50, 2, sensingRate),\n        new Node(220-padding, 70, 3, sensingRate),\n        new Node(220-padding, 140, 4, sensingRate),\n        new Node(160-padding, 170, 5, sensingRate),\n        new Node(160-padding, 110, 6, sensingRate-10,false),\n    ];\n    p.setup = function () {\n        console.log(\"Coverage Holes\");\n        // console.log(div1.offsetWidth - 90);\n        p.createCanvas(300, 250);\n        p.fill('black');\n    };\n\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n        console.log(\"myCustomRedrawAccordingToNewPropsHandler\");\n        console.log(props);\n    };\n\n    p.draw = function () {\n        p.background(200);\n        if (nodes) {\n            nodes.forEach((node, i) => {\n                if (node.active) {\n                    p.ellipse(node.x, node.y, 6, 6);\n                    p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    p.stroke('black');\n                    p.fill('rgba(0,255,0, 0.25)');\n\n                    p.circle(node.x, node.y, node.sensingRate * 2);\n                    if (node.isReference) {\n                        p.fill('rgba(163, 255, 232, 0.25)');\n                        p.circle(node.x, node.y, 2 * node.sensingRate * 2)\n                    }\n                    if (node.coverageHolesAroundNode.length > 0) {\n                        // console.log(\"coverage holes!!!\")\n                        node.coverageHolesAroundNode.forEach((val, index) => {\n                            p.ellipse(val.x, val.y, 6, 6);\n                            p.text('cc: ' + index + '', val.x - 16, val.y + 15);\n                        })\n                    }\n                } else {\n                    // p.ellipse(node.x, node.y, 6, 6);\n                    // p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    // p.stroke('black');\n                    p.fill('rgba(255,0,0, 0.25)');\n                    p.circle(node.x, node.y, node.sensingRate * 2);\n                }\n            });\n        }\n        if (p.circumCenter) {\n            // p.ellipse(p.circumCenter.x, p.circumCenter.y, 6, 6);\n            // p.text('Circum center', p.circumCenter.x - 16, p.circumCenter.y + 15);\n        }\n    };\n\n    p.mousePressed = function () {\n\n    };\n\n    p.windowResized = function () {\n        // let div1 = document.getElementById(\"paper\");\n        // p.resizeCanvas(div1.offsetWidth - 60, 300);\n    }\n};\n","import {squareDistanceBetweenPoints} from \"../utils/geometryUtils\";\nimport {\n    Node\n} from \"../utils/geometryUtils\";\n\nfunction checkClickInside(mouseX, mouseY, canvasWidth, canvasHeight) {\n    return mouseX > 0 && mouseX < canvasWidth && mouseY > 0 && mouseY < canvasHeight\n}\n\nexport default function sketchSensingRate(p) {\n    const sensingRate = 80;\n    const padding = 20;\n    let nodes = [\n        new Node(160-padding, 110, 0, sensingRate),\n    ];\n    p.setup = function () {\n        console.log(\"Coverage Holes\");\n        // console.log(div1.offsetWidth - 90);\n        p.createCanvas(300, 250);\n        p.fill('black');\n    };\n\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n    };\n\n    p.draw = function () {\n        p.background(200);\n        if (nodes) {\n            nodes.forEach((node, i) => {\n                if (node.active) {\n                    p.ellipse(node.x, node.y, 6, 6);\n                    p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    p.stroke('black');\n                    p.fill('rgba(0,255,0, 0.25)');\n\n                    p.circle(node.x, node.y, node.sensingRate * 2);\n                    if (node.isReference) {\n                        p.fill('rgba(163, 255, 232, 0.25)');\n                        p.circle(node.x, node.y, 2 * node.sensingRate * 2)\n                    }\n                    if (node.coverageHolesAroundNode.length > 0) {\n                        // console.log(\"coverage holes!!!\")\n                        node.coverageHolesAroundNode.forEach((val, index) => {\n                            p.ellipse(val.x, val.y, 6, 6);\n                            p.text('cc: ' + index + '', val.x - 16, val.y + 15);\n                        })\n                    }\n                } else {\n                    // p.ellipse(node.x, node.y, 6, 6);\n                    // p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    // p.stroke('black');\n                    p.fill('rgba(255,0,0, 0.25)');\n                    p.circle(node.x, node.y, node.sensingRate * 2);\n                }\n            });\n        }\n        if (p.circumCenter) {\n            // p.ellipse(p.circumCenter.x, p.circumCenter.y, 6, 6);\n            // p.text('Circum center', p.circumCenter.x - 16, p.circumCenter.y + 15);\n        }\n    };\n\n    p.mousePressed = function () {\n\n    };\n\n    p.windowResized = function () {\n        // let div1 = document.getElementById(\"paper\");\n        // p.resizeCanvas(div1.offsetWidth - 60, 300);\n    }\n};\n","import {squareDistanceBetweenPoints} from \"../utils/geometryUtils\";\nimport {\n    Node\n} from \"../utils/geometryUtils\";\n\nfunction checkClickInside(mouseX, mouseY, canvasWidth, canvasHeight) {\n    return mouseX > 0 && mouseX < canvasWidth && mouseY > 0 && mouseY < canvasHeight\n}\n\nexport default function sketchReferenceNode(p) {\n    const sensingRate = 80;\n    const padding = 20;\n    let nodes = [\n        new Node(190-padding, 180, 0, sensingRate,true,true),\n        new Node(100-padding, 130, 1, sensingRate),\n        new Node(230-padding, 90, 2, sensingRate),\n        new Node(280-padding, 260, 3, sensingRate),\n    ];\n    p.setup = function () {\n        console.log(\"Coverage Holes\");\n        // console.log(div1.offsetWidth - 90);\n        p.createCanvas(350, 350);\n        p.fill('black');\n    };\n\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n    };\n\n    p.draw = function () {\n        p.background(200);\n        if (nodes) {\n            nodes.forEach((node, i) => {\n                if (node.active) {\n                    p.ellipse(node.x, node.y, 6, 6);\n                    p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    p.stroke('black');\n                    p.fill('rgba(0,255,0, 0.25)');\n\n                    p.circle(node.x, node.y, node.sensingRate * 2);\n                    if (node.isReference) {\n                        p.fill('rgba(163, 255, 232, 0.25)');\n                        p.circle(node.x, node.y, 2 * node.sensingRate * 2)\n                    }\n                    if (node.coverageHolesAroundNode.length > 0) {\n                        // console.log(\"coverage holes!!!\")\n                        node.coverageHolesAroundNode.forEach((val, index) => {\n                            p.ellipse(val.x, val.y, 6, 6);\n                            p.text('cc: ' + index + '', val.x - 16, val.y + 15);\n                        })\n                    }\n                } else {\n                    // p.ellipse(node.x, node.y, 6, 6);\n                    // p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    // p.stroke('black');\n                    p.fill('rgba(255,0,0, 0.25)');\n                    p.circle(node.x, node.y, node.sensingRate * 2);\n                }\n            });\n        }\n        if (p.circumCenter) {\n            // p.ellipse(p.circumCenter.x, p.circumCenter.y, 6, 6);\n            // p.text('Circum center', p.circumCenter.x - 16, p.circumCenter.y + 15);\n        }\n    };\n\n    p.mousePressed = function () {\n\n    };\n\n    p.windowResized = function () {\n        // let div1 = document.getElementById(\"paper\");\n        // p.resizeCanvas(div1.offsetWidth - 60, 300);\n    }\n};\n","import {squareDistanceBetweenPoints} from \"../utils/geometryUtils\";\nimport {\n    Node\n} from \"../utils/geometryUtils\";\n\nfunction checkClickInside(mouseX, mouseY, canvasWidth, canvasHeight) {\n    return mouseX > 0 && mouseX < canvasWidth && mouseY > 0 && mouseY < canvasHeight\n}\n\nexport default function sketchNeighborNode(p) {\n    const sensingRate = 40;\n    const padding = 20;\n    let nodes = [\n        new Node(190-padding, 180, 0, sensingRate,true,true),\n        new Node(150-padding, 130, 1, sensingRate),\n        new Node(230-padding, 115, 2, sensingRate),\n        new Node(195-padding, 205, 3, sensingRate),\n    ];\n    p.setup = function () {\n        console.log(\"Coverage Holes\");\n        // console.log(div1.offsetWidth - 90);\n        p.createCanvas(350, 350);\n        p.fill('black');\n    };\n\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n    };\n\n    p.draw = function () {\n        p.background(200);\n        if (nodes) {\n            nodes.forEach((node, i) => {\n                if (node.active) {\n                    p.ellipse(node.x, node.y, 6, 6);\n                    p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    p.stroke('black');\n                    p.fill('rgba(0,255,0, 0.25)');\n\n                    p.circle(node.x, node.y, node.sensingRate * 2);\n                    if (node.isReference) {\n                        p.fill('rgba(163, 255, 232, 0.25)');\n                        p.circle(node.x, node.y, 2 * node.sensingRate * 2)\n                    }\n                    if (node.coverageHolesAroundNode.length > 0) {\n                        // console.log(\"coverage holes!!!\")\n                        node.coverageHolesAroundNode.forEach((val, index) => {\n                            p.ellipse(val.x, val.y, 6, 6);\n                            p.text('cc: ' + index + '', val.x - 16, val.y + 15);\n                        })\n                    }\n                } else {\n                    // p.ellipse(node.x, node.y, 6, 6);\n                    // p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    // p.stroke('black');\n                    p.fill('rgba(255,0,0, 0.25)');\n                    p.circle(node.x, node.y, node.sensingRate * 2);\n                }\n            });\n        }\n        if (p.circumCenter) {\n            // p.ellipse(p.circumCenter.x, p.circumCenter.y, 6, 6);\n            // p.text('Circum center', p.circumCenter.x - 16, p.circumCenter.y + 15);\n        }\n    };\n\n    p.mousePressed = function () {\n\n    };\n\n    p.windowResized = function () {\n        // let div1 = document.getElementById(\"paper\");\n        // p.resizeCanvas(div1.offsetWidth - 60, 300);\n    }\n};\n","import {squareDistanceBetweenPoints} from \"../utils/geometryUtils\";\nimport {\n    Node\n} from \"../utils/geometryUtils\";\n\nfunction checkClickInside(mouseX, mouseY, canvasWidth, canvasHeight) {\n    return mouseX > 0 && mouseX < canvasWidth && mouseY > 0 && mouseY < canvasHeight\n}\n\nexport default function sketchCircumRadiusCenterNode(p) {\n    const sensingRate = 60;\n    const padding = 20;\n    let nodes = [\n        new Node(190 - padding, 90, 0, sensingRate, true, false),\n        new Node(130 - padding, 180, 1, sensingRate),\n        new Node(230 - padding, 185, 2, sensingRate),\n    ];\n    p.setup = function () {\n        console.log(\"Coverage Holes\");\n        // console.log(div1.offsetWidth - 90);\n        p.createCanvas(350, 350);\n        p.fill('black');\n    };\n\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n    };\n\n    p.draw = function () {\n        p.background(200);\n        if (nodes) {\n            nodes.forEach((node, i) => {\n                if (node.active) {\n                    p.stroke('black');\n                    p.ellipse(node.x, node.y, 6, 6);\n                    p.stroke('black');\n                    p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    p.stroke('black');\n                    p.fill('rgba(0,255,0, 0.10)');\n\n                    p.circle(node.x, node.y, node.sensingRate * 2);\n                    if (node.isReference) {\n                        p.fill('rgba(163, 255, 232, 0.25)');\n                        p.circle(node.x, node.y, 2 * node.sensingRate * 2)\n                    }\n                    if (node.coverageHolesAroundNode.length > 0) {\n                        // console.log(\"coverage holes!!!\")\n                        node.coverageHolesAroundNode.forEach((val, index) => {\n                            p.ellipse(val.x, val.y, 6, 6);\n                            p.text('cc: ' + index + '', val.x - 16, val.y + 15);\n                        })\n                    }\n                } else {\n                    // p.ellipse(node.x, node.y, 6, 6);\n                    // p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    // p.stroke('black');\n                    p.fill('rgba(255,0,0, 0.25)');\n                    p.circle(node.x, node.y, node.sensingRate * 2);\n                }\n                p.line(nodes[0].x, nodes[0].y, nodes[1].x, nodes[1].y);\n                p.line(nodes[1].x, nodes[1].y, nodes[2].x, nodes[2].y);\n                p.line(nodes[2].x, nodes[2].y, nodes[0].x, nodes[0].y);\n                p.stroke('black');\n                p.fill('rgba(0,0,0, 0.9)');\n                p.ellipse(165, 150, 10, 10);\n                p.text('Z', 160, 150 + 18);\n                // p.fill('rgba(236,20,21,0.9)');\n                p.stroke('rgba(236,20,21,0.9)');\n                p.line(165, 150, nodes[0].x, nodes[0].y);\n                p.text('R', 170, 120 + 18);\n\n\n\n            });\n        }\n        if (p.circumCenter) {\n            // p.ellipse(p.circumCenter.x, p.circumCenter.y, 6, 6);\n            // p.text('Circum center', p.circumCenter.x - 16, p.circumCenter.y + 15);\n        }\n    };\n\n    p.mousePressed = function () {\n\n    };\n\n    p.windowResized = function () {\n        // let div1 = document.getElementById(\"paper\");\n        // p.resizeCanvas(div1.offsetWidth - 60, 300);\n    }\n};\n","import React, {Component} from 'react';\nimport withStyles from '@material-ui/styles/withStyles';\nimport {withRouter} from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nimport Topbar from './Topbar';\nimport Lemma1 from \"./dialogs/proofs/Lemma1\";\nimport {DATA_THEO} from \"../data/theo\";\nimport P5Wrapper from \"react-p5-wrapper\";\nimport sketch_ch_definition from \"../sketches/CoverageHoleDefinition\";\nimport MathNotation from \"../components/MathNotation\";\nimport MathJax from \"react-mathjax\";\nimport sketchSensingRate from \"../sketches/SensingRate\";\nimport sketchReferenceNode from \"../sketches/ReferenceNode\";\nimport sketchNeighborNode from \"../sketches/Neighbors\";\nimport sketchCircumRadiusCenterNode from \"../sketches/CircumRadiusCenter\";\n\nconst numeral = require('numeral');\nnumeral.defaultFormat('0,000');\n\nconst backgroundShape = require('../images/shape.svg');\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.grey['100'],\n        overflow: 'hidden',\n        backgroundSize: 'cover',\n        backgroundPosition: '0 400px',\n        paddingBottom: 200\n    },\n    gridList: {\n        flexWrap: 'nowrap',\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n        transform: 'translateZ(0)',\n    },\n    title: {\n        color: theme.palette.primary.light,\n    },\n    titleBar: {\n        background:\n            'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n    },\n    grid: {\n        width: 1200,\n        marginTop: 40,\n        [theme.breakpoints.down('sm')]: {\n            width: 'calc(100% - 20px)'\n        }\n    },\n    paper: {\n        padding: theme.spacing(3),\n        textAlign: 'left',\n        color: theme.palette.text.secondary,\n    },\n    rangeLabel: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingTop: theme.spacing(2)\n    },\n    topBar: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        marginTop: 32\n    },\n    outlinedButtom: {\n        textTransform: 'uppercase',\n        margin: theme.spacing(1)\n    },\n    actionButtom: {\n        textTransform: 'uppercase',\n        margin: theme.spacing(1),\n        width: 152\n    },\n    blockCenter: {\n        padding: theme.spacing(2),\n        textAlign: 'center'\n    },\n    block: {\n        padding: theme.spacing(2),\n    },\n    box1: {\n        marginBottom: 40,\n        height: 450\n    },\n    inlining: {\n        display: 'inline-block',\n        marginRight: 10\n    },\n    buttonBar: {\n        display: 'flex'\n    },\n    alignRight: {\n        display: 'flex',\n        justifyContent: 'flex-end'\n    },\n    noBorder: {\n        borderBottomStyle: 'hidden'\n    },\n    loadingState: {\n        opacity: 0.05\n    },\n    loadingMessage: {\n        position: 'absolute',\n        top: '40%',\n        left: '40%'\n    }\n});\n\nclass DefinitionsAndNotations extends Component {\n\n    state = {\n        loading: true,\n        selectedImage: \"\",\n        selectedTest: \"\",\n        modals: {\n            active: false,\n            lemma1: {\n                active: false,\n                content: ''\n            }\n        }\n    };\n\n    componentDidMount() {\n    }\n\n    dialogClose = (lt) => {\n        this.setState({modals: {['lemma1']: {['active']: false}}})\n    };\n\n    openDialog = (proof) => {\n        console.log(\"Open dialog\");\n        // this.setState({modals: {[lt]: true}})\n        this.setState({\n            modals: {['lemma1']: {['active']: true}},\n            selectedImage: proof['img'],\n            selectedTest: proof['description']\n        })\n    };\n\n    render() {\n        const {classes} = this.props;\n        const currentPath = this.props.location.pathname;\n        const keys = Object.keys(DATA_THEO);\n        return (\n            <React.Fragment>\n                <CssBaseline/>\n                <Topbar currentPath={currentPath}/>\n                <div className={classes.root}>\n                    <Grid container justify=\"center\">\n                        <Grid spacing={4} alignItems=\"center\" justify=\"left\" container className={classes.grid}>\n                            <Grid container item xs={12}>\n                                <Grid item xs={12}>\n                                    <div className={classes.box1} style={{height:370}}>\n                                        <Typography color='secondary' variant=\"h4\" gutterBottom>\n                                            Coverage Hole\n                                        </Typography>\n                                        <Typography variant=\"body1\" gutterBottom>\n                                            In a wireless sensor network, a coverage hole can be defined as an area\n                                            within the network that is not covered by any\n                                            sensor node, this can result in lack of monitoring of that specific area.\n                                            What we define as coverage depends on the context\n                                            of the application. For instance, in the art gallery problem, where the main\n                                            objective is to get the minimum number of \"cameras\"\n                                            that cover an art gallery room such that every point is seen by at least one\n                                            camera. In this context, the coverage is determined by\n                                            the visibility of the observers. As mentioned above, the coverage of a\n                                            point, in the context of WSN, denotes that the point is located within de\n                                            sensing range\n                                            of a node. In the example below, there is a coverage hole in the red colored\n                                            area.\n                                        </Typography>\n                                        <div style={{textAlign: 'left'}}>\n                                            <P5Wrapper sketch={sketch_ch_definition}/>\n                                        </div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                            <Grid container item xs={12}>\n                                <Grid item xs={12}>\n                                    <div className={classes.box1} style={{height:350}}>\n                                        <Typography color='secondary' variant=\"h4\" gutterBottom>\n                                            Sensing and Communication Range (<MathNotation inline={true} text={\"R_s\"}/>)\n                                        </Typography>\n                                        <Typography variant=\"body1\" gutterBottom>\n                                            The sensing range of a node is the circumference of radius <MathNotation\n                                            inline={true} text={\"R_s\"}/>\n                                            represented as a disk around the node. Any object that falls within this\n                                            area can be detected by\n                                            the node. For this particular case, the communication range <MathNotation\n                                            inline={true} text={\"R_c\"}/> of a sensor will have the same value as the\n                                            sensing rate. In the example below, the sensing rate of \"Node 0\" is\n                                            represented by the green area.\n                                        </Typography>\n                                        <div style={{textAlign: 'left'}}>\n                                            <P5Wrapper sketch={sketchSensingRate}/>\n                                        </div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                            <Grid container item xs={12}>\n                                <Grid item xs={12}>\n                                    <div className={classes.box1} style={{height:450}}>\n                                        <Typography color='secondary' variant=\"h4\" gutterBottom>\n                                            Reference Node (<MathNotation inline={true} text={\"RN\"}/>)\n                                        </Typography>\n                                        <Typography variant=\"body1\" gutterBottom>\n                                            A Reference Node <MathNotation inline={true} text={\"RN\"}/>, is in charge of\n                                            initializing the coverage hole detection algorithm.\n                                            It does this by first finding its neighbors information in a range\n                                            of <MathNotation inline={true} text={\"2R_s\"}/>. In the example below, \"Node\n                                            0\" is a reference node and Nodes 1, 2 and 3 are its neighbors.\n\n                                        </Typography>\n                                        <div style={{textAlign: 'left'}}>\n                                            <P5Wrapper sketch={sketchReferenceNode}/>\n                                        </div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                            <Grid container item xs={12}>\n                                <Grid item xs={12}>\n                                    <div className={classes.box1}>\n                                        <Typography color='secondary' variant=\"h4\" gutterBottom>\n                                            Neighbors\n                                        </Typography>\n                                        <Typography variant=\"body1\" gutterBottom>\n\n                                            If Node 0 and Node 1 are two nodes where the distance between them is lower\n                                            or equal than the sensing range (<MathNotation inline={true}\n                                                                                           text={\"distance(AB) \\\\leq\\t R_s\"}/>),\n                                            then Node 0 and 1 are one-hope neighbors.\n                                            On the other hand if the distance between them is lower or equal than twice\n                                            the sensing range <MathNotation inline={true}\n                                                                            text={\"distance(AB) \\\\leq\\t 2R_s\"}/>, then\n                                            they are two-hop neighbors.\n                                            In the example below, Node 3 is a one hope neighbor of Node 0 since the\n                                            distance between them is lower or equal than the sensing range of Node 0,\n                                            whereas Nodes 1 and 2 are two-hop neighbors of Node 0 since the distance\n                                            between\n                                            them and is lower or equal than twice the sensing range of Node 0.\n\n                                        </Typography>\n                                        <div style={{textAlign: 'left'}}>\n                                            <P5Wrapper sketch={sketchNeighborNode}/>\n                                        </div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                            <Grid container item xs={12}>\n                                <Grid item xs={12}>\n                                    <div className={classes.box1}>\n                                        <Typography color='secondary' variant=\"h4\" gutterBottom>\n                                            Circum Radius (<MathNotation inline={true} text={\"R\"}/>) and Circum Center (<MathNotation\n                                            inline={true} text={\"Z\"}/>)\n                                        </Typography>\n                                        <Typography variant=\"body1\" gutterBottom>\n\n                                            Circum Radius <MathNotation inline={true} text={\"R\"}/> is denoted as the\n                                            radius of the circum circle denoted by the location of three nodes as the\n                                            vertices of a triangle.\n                                            In the example below, <MathNotation inline={true} text={\"R\"}/> is the circum\n                                            radius of the triangle <MathNotation inline={true} text={\"T\"}/> formed by\n                                            NODE0-NODE1-NODE2.\n                                            Let <MathNotation inline={true} text={\"p\"}/>, <MathNotation inline={true}\n                                                                                                        text={\"q\"}/> and <MathNotation\n                                            inline={true} text={\"r\"}/> denote de length of each side of the\n                                            triangle <MathNotation inline={true} text={\"T\"}/> and <MathNotation\n                                            inline={true} text={\"\\\\Delta\\t\"}/> be its area,\n                                            then <MathNotation inline={true} text={\"R = \\\\frac{pqr}{4\\\\Delta\\t}\\t\"}/>\n                                            <br/>\n                                            <br/>\n\n                                            Circum Center <MathNotation inline={true} text={\"Z\"}/> is denoted as the\n                                            center of the circum circle formed by the location of three nodes as the\n                                            vertices of a triangle.\n                                            In the example below, <MathNotation inline={true} text={\"R\"}/> is the circum\n                                            radius of the triangle <MathNotation inline={true} text={\"T\"}/> formed by\n                                            NODE0-NODE1-NODE2.\n                                            Let <MathNotation inline={true} text={\"(x_1,y_1)\"}/> , <MathNotation\n                                            inline={true} text={\"(x_2,y_2)\"}/> and <MathNotation inline={true}\n                                                                                               text={\"(x_3,y_3)\"}/> be the\n                                            coordinates of the vertices of triangle <MathNotation inline={true} text={\"T\"}/> then the coordinates\n                                            <MathNotation inline={true} text={\"(x_0,y_0)\"}/>  of <MathNotation inline={true} text={\"Z\"}/> can be found by\n                                            solving the following linear equations: <br/>\n                                            <MathNotation inline={true} text={\"x_0(x_2 -x_1) + y_0(y_2 - y_1) + c1\"}/>\n                                            <br/>\n                                            <MathNotation inline={true} text={\"x_0(x_3 -x_2) + y_0(y_3 - y_1) + c2\"}/>\n\n\n                                        </Typography>\n                                        <div style={{textAlign: 'left'}}>\n                                            <P5Wrapper sketch={sketchCircumRadiusCenterNode}/>\n                                        </div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default withRouter(withStyles(styles)(DefinitionsAndNotations));\n","import {\n    checkClickInside,\n    distanceBetweenTwoPoints,\n    nodesThatListenedMessageWithRespectToRadius,\n    Point,\n    squareDistanceBetweenPoints\n} from \"../utils/geometryUtils\";\nimport {\n    Node\n} from \"../utils/geometryUtils\";\nimport {joinArrays} from \"../utils/generalUtils\";\n\n\nexport default function exampleAlgo(p) {\n    const sensingRate = 60;\n    const paddingx = 150;\n    const paddingy = 70;\n    let firstTime = true;\n    let nodes = [\n        new Node(469.4566699123661 - paddingx, 244.0703125 - paddingy, 0, sensingRate, true, true),\n        new Node(430 - paddingx, 224.0703125 - paddingy, 1, sensingRate, true),\n        new Node(395 - paddingx, 160 - paddingy, 2, sensingRate),\n        new Node(550 - paddingx, 196.0703125 - paddingy, 3, sensingRate),\n        new Node(560 - paddingx, 285 - paddingy, 4, sensingRate),\n        new Node(495 - paddingx, 330 - paddingy, 5, sensingRate),\n        new Node(400 - paddingx, 327 - paddingy, 6, sensingRate),\n        new Node(370 - paddingx, 261 - paddingy, 7, sensingRate),\n    ];\n\n    p.setup = function () {\n        console.log(\"Coverage Holes\");\n        // console.log(div1.offsetWidth - 90);\n        p.createCanvas(600, 350);\n        p.fill('black');\n    };\n\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n        if (props.clickOnNodes) {\n            p.clickOnNodes = props.clickOnNodes;\n        }\n        if (props.sendNeighbors) {\n            p.sendNeighbors = props.sendNeighbors;\n        }\n    };\n\n    p.draw = function () {\n        p.background(200);\n        if (nodes) {\n            nodes.forEach((node, i) => {\n                if (node.active) {\n                    p.fill('rgba(0,0,0, 1)');\n                    p.ellipse(node.x, node.y, 6, 6);\n                    p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    p.stroke('black');\n                    p.fill('rgba(0,255,0, 0.15)');\n\n                    p.circle(node.x, node.y, node.sensingRate * 2);\n                    if (node.isReference) {\n                        p.fill('rgba(163, 255, 232, 0.25)');\n                        p.circle(node.x, node.y, 2 * node.sensingRate * 2)\n                    }\n                    if (node.coverageHolesAroundNode.length > 0) {\n                        // console.log(\"coverage holes!!!\")\n                        node.coverageHolesAroundNode.forEach((val, index) => {\n                            p.ellipse(val.x, val.y, 6, 6);\n                            p.text('cc: ' + index + '', val.x - 16, val.y + 15);\n                        })\n                    }\n                } else {\n                    // p.ellipse(node.x, node.y, 6, 6);\n                    // p.text('Node ' + (i) + '', node.x - 16, node.y + 15);\n                    // p.stroke('black');\n                    p.fill('rgba(255,0,0, 0.25)');\n                    p.circle(node.x, node.y, node.sensingRate * 2);\n                }\n            });\n        }\n        if (p.circumCenter) {\n            // p.ellipse(p.circumCenter.x, p.circumCenter.y, 6, 6);\n            // p.text('Circum center', p.circumCenter.x - 16, p.circumCenter.y + 15);\n        }\n        if(firstTime && p.sendNeighbors){\n            const {oneHopeNeighbors, twoHopeNeighbors} = nodesThatListenedMessageWithRespectToRadius(0, nodes, true, \"Hello\");\n            p.sendNeighbors(nodes[0], oneHopeNeighbors.map((val) => nodes[val]), twoHopeNeighbors.map((val) => nodes[val]));\n            firstTime = false\n        }\n        if (p.clickOnNodes) {\n            p.text('Click on a node to set it as reference node', 10, 15);\n        }\n    };\n\n    p.mousePressed = function () {\n        if (p.clickOnNodes) {\n            if (checkClickInside(p.mouseX, p.mouseY, 600, 350)) {\n                let point = new Point(p.mouseX, p.mouseY);\n                let min = 1000000000;\n                let i = 0;\n                nodes.forEach((node, index) => {\n                    const distance = distanceBetweenTwoPoints(node, point);\n                    if (distance < min) {\n                        min = distance;\n                        i = index\n                    }\n                });\n                if (min < 20) {\n                    nodes.forEach((node, index) => {\n                        node.isReference = false;\n                    });\n                    nodes[i].isReference = true;\n                    const {oneHopeNeighbors, twoHopeNeighbors} = nodesThatListenedMessageWithRespectToRadius(i, nodes, true, \"Hello\");\n                    p.sendNeighbors(nodes[i], oneHopeNeighbors.map((val) => nodes[val]), twoHopeNeighbors.map((val) => nodes[val]));\n                }\n            }\n        }\n\n    };\n\n    p.windowResized = function () {\n        // let div1 = document.getElementById(\"paper\");\n        // p.resizeCanvas(div1.offsetWidth - 60, 300);\n    }\n};\n","import React, {Component} from 'react';\nimport withStyles from '@material-ui/styles/withStyles';\nimport {Link, withRouter} from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nimport Topbar from './Topbar';\nimport {DATA_THEO} from \"../data/theo\";\nimport P5Wrapper from \"react-p5-wrapper\";\nimport MathNotation from \"../components/MathNotation\";\nimport sketchSensingRate from \"../sketches/SensingRate\";\nimport sketchReferenceNode from \"../sketches/ReferenceNode\";\nimport sketchNeighborNode from \"../sketches/Neighbors\";\nimport sketchCircumRadiusCenterNode from \"../sketches/CircumRadiusCenter\";\nimport exampleAlgo from \"../sketches/Example\";\nimport {joinArrays} from \"../utils/generalUtils\";\nimport {\n    Node, nodesThatCoverCircumCenter, Point, Triangle\n} from \"../utils/geometryUtils\";\nimport TriangleSketch from \"../sketches/Triangle\";\nimport Button from \"@material-ui/core/Button\";\nimport PseudoDescription from \"./dialogs/pseudoDescription\";\n\nconst numeral = require('numeral');\nnumeral.defaultFormat('0,000');\n\nconst backgroundShape = require('../images/shape.svg');\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.grey['100'],\n        overflow: 'hidden',\n        backgroundSize: 'cover',\n        backgroundPosition: '0 400px',\n        paddingBottom: 200\n    },\n    gridList: {\n        flexWrap: 'nowrap',\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n        transform: 'translateZ(0)',\n    },\n    title: {\n        color: theme.palette.primary.light,\n    },\n    titleBar: {\n        background:\n            'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n    },\n    grid: {\n        width: 1200,\n        marginTop: 40,\n        [theme.breakpoints.down('sm')]: {\n            width: 'calc(100% - 20px)'\n        }\n    },\n    paper: {\n        padding: theme.spacing(3),\n        textAlign: 'left',\n        color: theme.palette.text.secondary,\n    },\n    rangeLabel: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingTop: theme.spacing(2)\n    },\n    topBar: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        marginTop: 32\n    },\n    outlinedButtom: {\n        textTransform: 'uppercase',\n        margin: theme.spacing(1)\n    },\n    actionButtom: {\n        textTransform: 'uppercase',\n        margin: theme.spacing(1),\n        width: 152\n    },\n    blockCenter: {\n        padding: theme.spacing(2),\n        textAlign: 'center'\n    },\n    block: {\n        padding: theme.spacing(2),\n    },\n    box1: {\n        marginBottom: 40,\n        height: 450\n    },\n    inlining: {\n        display: 'inline-block',\n        marginRight: 10\n    },\n    buttonBar: {\n        display: 'flex'\n    },\n    alignRight: {\n        display: 'flex',\n        justifyContent: 'flex-end'\n    },\n    noBorder: {\n        borderBottomStyle: 'hidden'\n    },\n    loadingState: {\n        opacity: 0.05\n    },\n    loadingMessage: {\n        position: 'absolute',\n        top: '40%',\n        left: '40%'\n    }\n});\n\nclass AlgorithmDescription extends Component {\n\n\n    state = {\n        loading: true,\n        selectedImage: \"\",\n        selectedTest: \"\",\n        oneHopeNeighbors: [new Node(2, 2, 1), new Node(3, 3, 2)],\n        twoHopeNeighbors: [],\n        referenceNode: new Node(0, 0, 0),\n        pseudoDescription: false,\n        modals: {\n            active: false,\n            lemma1: {\n                active: false,\n                content: ''\n            }\n        }\n    };\n\n    componentDidMount() {\n\n    }\n\n    dialogClose = (lt) => {\n        this.setState({pseudoDescription: false})\n    };\n\n    openDialog = () => {\n        this.setState({\n            pseudoDescription: true\n        })\n    };\n\n    receiveNeighbors = (referenceNode, oneHopeNeighbors, twoHopeNeighbors) => {\n        this.setState({oneHopeNeighbors, twoHopeNeighbors, referenceNode: referenceNode})\n    };\n\n    render() {\n        const {classes} = this.props;\n        const currentPath = this.props.location.pathname;\n        const N = joinArrays(this.state.oneHopeNeighbors, this.state.twoHopeNeighbors);\n        const nodes = N.concat(this.state.referenceNode);\n        const N_u = N.filter((val) => val.y <= this.state.referenceNode.y);\n        let N_uX = N_u.sort(function (a, b) {\n            return a.x - b.x\n        });\n        N_uX = N_uX.length >= 2 ? N_uX : [new Node(2, 2, -1), new Node(3, 3, -2)]\n        const N_d = N.filter((val) => val.y > this.state.referenceNode.y);\n        const N_dX = N_d.sort(function (a, b) {\n            return b.x - a.x\n        });\n        const triangle = new Triangle(this.state.referenceNode, N_uX[0], N_uX[1]);\n        const R = triangle.getCircumRadius();\n        const Z = triangle.getCircumCenter();\n        let noHoleDetected = nodesThatCoverCircumCenter(Z, nodes, nodes.sensingRate).length > 0;\n        return (\n            <React.Fragment>\n                <CssBaseline/>\n                <Topbar currentPath={currentPath}/>\n                <div className={classes.root}>\n                    <Grid container justify=\"center\">\n                        <Grid spacing={4} alignItems=\"center\" justify=\"left\" container className={classes.grid}>\n                            <Grid container item xs={12}>\n                                <Grid item xs={12}>\n                                    <div className={classes.box1} style={{height: 400}}>\n                                        <Typography color='secondary' variant=\"h4\" gutterBottom>\n                                            Description\n                                        </Typography>\n                                        <Typography variant=\"body1\" gutterBottom>\n                                            The algorithm proposed in [1] is divided in two parts, a neighbor discovery\n                                            phase and a hole discovery phase.\n                                            In order to explain both phases the following example will be used:\n                                        </Typography>\n                                        <div style={{textAlign: 'left'}}>\n                                            <P5Wrapper sketch={exampleAlgo} clickOnNodes={false}/>\n                                        </div>\n\n                                    </div>\n                                </Grid>\n                            </Grid>\n                            <Grid container item xs={12}>\n                                <Grid item xs={12}>\n                                    <div className={classes.box1} style={{height: 600}}>\n                                        <Typography color='secondary' variant=\"h4\" gutterBottom>\n                                            Neighbor Discovery phase\n                                        </Typography>\n                                        <Typography variant=\"body1\" gutterBottom>\n                                            In order to execute this phase, a reference node <MathNotation inline={true}\n                                                                                                           text={\"RN\"}/>\n                                            must be selected (Node 0 for the present example). <MathNotation\n                                            inline={true} text={\"RN\"}/> broadcasts a message <MathNotation\n                                            inline={true} text={\"M_1\"}/>\n                                            which contains its coordinates. Each node that receives the message\n                                            calculates\n                                            the distance <MathNotation inline={true} text={\"d_a\"}/> between themselves\n                                            and the\n                                            reference node. If &nbsp;\n                                            <MathNotation inline={true} text={\"d_a \\\\leq\\t R_s\"}/>, then that node sets\n                                            itself as\n                                            a one-hop neighbor of <MathNotation inline={true} text={\"RN\"}/> and unicast\n                                            its coordinates\n                                            and ID to <MathNotation inline={true} text={\"RN\"}/>. Next, all one-hop\n                                            neighbors broadcast a\n                                            message <MathNotation inline={true} text={\"M_2\"}/> that contains the\n                                            coordinates of <MathNotation inline={true} text={\"RN\"}/>.\n                                            The same process is applied with the nodes that receive the\n                                            message <MathNotation inline={true} text={\"M_2\"}/>.\n                                            Each node computes the distance <MathNotation inline={true}\n                                                                                          text={\"d_b\"}/> between\n                                            themselves and <MathNotation inline={true} text={\"RN\"}/>.\n                                            If &nbsp; <MathNotation inline={true} text={\"d_b \\\\leq\\t 2R_s\"}/>, then that\n                                            node sets itself as a\n                                            two hop-neighbor of <MathNotation inline={true} text={\"RN\"}/>. After the\n                                            process is completed the reference node\n                                            has information about its one and two hop neighbors.\n                                            This process has to be completed by each node in the neighbor in a\n                                            distributed manner.\n\n                                        </Typography>\n                                        <div style={{textAlign: 'left'}}>\n                                            <P5Wrapper sketch={exampleAlgo} clickOnNodes={true}\n                                                       sendNeighbors={this.receiveNeighbors}/>\n\n                                        </div>\n                                        <Typography variant=\"body1\" gutterBottom>\n                                            <b>INSTRUCTIONS :</b> Click on a node to set it as reference and compute its\n                                            neighbors <br/>\n                                            <b>Reference Node :</b> {this.state.referenceNode.id} <br/>\n                                            <b>One-hop neighbors\n                                                :</b> {this.state.oneHopeNeighbors.map((s) => s.id.toString() + ' ')}\n                                            <br/>\n                                            <b>Two-hop neighbors\n                                                :</b> {this.state.twoHopeNeighbors.map((s) => s.id.toString() + ' ')}\n                                        </Typography>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                            <Grid container item xs={12}>\n                                <Grid item xs={12}>\n                                    <div className={classes.box1} style={{height: N_uX[0].id !== -1 ? 700 : 270}}>\n                                        <Typography color='secondary' variant=\"h4\" gutterBottom>\n                                            Hole detection phase\n                                        </Typography>\n                                        <Typography variant=\"body1\" gutterBottom>\n                                            <Button\n                                                onClick={this.openDialog}\n                                                color='contained'\n                                                variant=\"outlined\"\n                                                className={classes.actionButtomR}>\n                                                See pseudo code\n                                            </Button> <br/>\n                                            This phase can be executed in a distributed way once every node knows its\n                                            one and two hop neighbors.\n                                            The algorithm is as follows:<br/>\n                                            <b>1.- Get one and two hop neighbors of the Reference node and assign them\n                                                to a set M </b><br/>\n                                            M = {N.map((s) => s.id.toString() + ' ')} <br/>\n                                            <b>2.- Get nodes from M whose y-coordinate is greater or equal than the\n                                                y-coordinate of the reference node and assign them to set M_u </b><br/>\n                                            M_u = {N_u.map((s) => s.id.toString() + ' ')}<br/>\n                                            <b>3.- Sort M_u in ascending order by x coordinate and assign it to a new\n                                                set M_uX </b><br/>\n                                            M_uX = {N_uX.map((s) => s.id.toString() + ' ')}<br/>\n                                            <b>4.- Get nodes from M whose y-coordinate is lower than the y-coordinate of\n                                                the reference node and assign them to set M_d</b><br/>\n                                            M_d = {N_d.map((s) => s.id.toString() + ' ')}<br/>\n                                            <b>5.- Sort M_d in descending order by x coordinate and assign it to a new\n                                                set M_dX </b><br/>\n                                            M_dX = {N_dX.map((s) => s.id.toString() + ' ')}<br/>\n                                            <b>6.- Select first two nodes A_i (Node {N_uX[0].id}) and A_j\n                                                (Node {N_uX[1].id}) from set M_uX </b><br/>\n\n                                            {\n                                                N_uX.length >= 2 && N_uX[0].id !== -1 && (\n                                                    <P5Wrapper sketch={TriangleSketch}\n                                                               clickOnNodes={false}\n                                                               triangle={triangle}\n                                                               nodes={[this.state.referenceNode, N_uX[0], N_uX[1]]}/>\n                                                )\n                                            }\n                                        </Typography>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                            <Grid container item xs={12}>\n                                <Grid item xs={12}>\n                                    <div className={classes.box1} style={{height: N_uX[0].id !== -1 ? 815 : 200}}>\n                                        <Typography variant=\"body1\" gutterBottom>\n                                            <b>7.- Compute the circum radius R and circum center Z of triangle formed by\n                                                the reference node (Node {this.state.referenceNode.id}) and A_i\n                                                (Node {N_uX[0].id}),\n                                                A_j (Node {N_uX[1].id}) </b><br/>\n                                            {\n                                                N_uX.length >= 2 && N_uX[0].id !== -1 && (\n                                                    <P5Wrapper sketch={TriangleSketch}\n                                                               clickOnNodes={false}\n                                                               triangle={triangle}\n                                                               drawCircle={true}\n                                                               drawRadiusLine={true}\n                                                               computeCircumData={true}/>\n                                                )\n                                            }\n                                            <b>8.- Verify if the triangle formed by A_i (Node {N_uX[0].id}),\n                                                A_j (Node {N_uX[1].id}) and the reference node\n                                                (Node{this.state.referenceNode.id})\n                                                forms an obtuse or acute triangle </b><br/>\n                                            {\n                                                N_uX.length >= 2 && N_uX[0].id !== -1 && (\n                                                    <P5Wrapper sketch={TriangleSketch}\n                                                               clickOnNodes={false}\n                                                               triangle={triangle}\n                                                               drawCircle={true}\n                                                               drawRadiusLine={true}\n                                                               drawTriangle={true}\n                                                               computeCircumData={false}/>\n                                                )\n                                            }\n                                            {\n\n                                                N_uX.length >= 2 && N_uX[0].id !== -1 && (\n                                                    <span>\n                                                        Angles: <br/>\n                                                        <MathNotation inline={true}\n                                                                      text={\"\\\\alpha\\t\"}/> : {triangle.getAngles().alpha * (180 / Math.PI)}\n                                                        <br/>\n                                                   <MathNotation inline={true}\n                                                                 text={\"\\\\beta\\t\"}/> : {triangle.getAngles().betta * (180 / Math.PI)}\n                                                        <br/>\n                                                   <MathNotation inline={true}\n                                                                 text={\"\\\\gamma\\t\"}/> : {triangle.getAngles().gamma * (180 / Math.PI)}\n                                                        <br/>\n                                                        {\n                                                            triangle.isAcute() && (\n                                                                <span>Triangle is acute (All angles have a value less than 90°)</span>\n                                                            )\n                                                        }\n                                                        {\n                                                            triangle.isObtuse() && (\n                                                                <span>Triangle is obtuse (One angle is greater than 90°)</span>\n                                                            )\n                                                        }\n                                                    </span>\n\n                                                )\n                                            }\n\n                                            <br/>\n                                        </Typography>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                            <Grid container item xs={12}>\n                                {\n                                    N_uX.length >= 2 && N_uX[0].id !== -1 && triangle.isObtuse() && (\n                                        <Grid item xs={12}>\n                                            <div className={classes.box1} style={{height: 750}}>\n                                                <Typography variant=\"body1\" gutterBottom>\n                                                    <br/>\n                                                    <b> 9.- In this case the triangle is obtuse, therefore we need to\n                                                        first\n                                                        compare <MathNotation inline={true}\n                                                                              text={\"R_s\"}/> with <MathNotation\n                                                            inline={true} text={\"R\"}/>. </b><br/>\n                                                    {\n                                                        N_uX.length >= 2 && (\n                                                            <span>\n\n\n                                            <b>If <MathNotation inline={true} text={\"R \\\\leq\\t R_s\"}/> then there is not\n                                                a coverage hole around the reference node (Node {this.state.referenceNode.id}) and A_i (Node {N_uX[0].id}), A_j (Node {N_uX[1].id}) </b><br/>\n                                                <b>R: </b> {R} <br/>\n                                            <b>R_s: </b>{this.state.referenceNode.sensingRate} <br/>\n                                                                {\n                                                                    R <= this.state.referenceNode.sensingRate && (\n                                                                        <span>\n                                                                 No coverage hole detected around reference node (Node {this.state.referenceNode.id}) and A_i (Node {N_uX[0].id}), A_j (Node {N_uX[1].id})\n                                                                    <br/><b>10.- Repeat process for any pair of nodes and reference node of set <MathNotation\n                                                                            inline={true}\n                                                                            text={\"M_uX\"}/> and <MathNotation\n                                                                            inline={true} text={\"M_dX\"}/></b>\n                                                                 </span>\n                                                                    )\n                                                                }\n                                                                {\n                                                                    R > this.state.referenceNode.sensingRate && (\n                                                                        <span>\n                                                                            In this case, <MathNotation inline={true}\n                                                                                                        text={\"R > R_s\"}/>, therefore we need to check if Z is covered by any other node.\n                                                                            <P5Wrapper sketch={TriangleSketch}\n                                                                                       clickOnNodes={false}\n                                                                                       drawCircle={false}\n                                                                                       drawTriangle={false}\n                                                                                       otherNodes={nodes}\n                                                                                       triangle={triangle}\n                                                                                       computeCircumData={true}/>\n                                                                            {\n                                                                                !noHoleDetected && (\n                                                                                    <span>\n                                                                                        <b>There is a coverage hole since Z is not covered by any other node</b>\n                                                                                        <br/><b>10.- Repeat process for any pair of nodes and reference node of set <MathNotation\n                                                                                        inline={true}\n                                                                                        text={\"M_uX\"}/> and <MathNotation\n                                                                                        inline={true}\n                                                                                        text={\"M_dX\"}/></b>\n                                                                                    </span>\n\n                                                                                )\n                                                                            }\n                                                                            {\n                                                                                noHoleDetected && (\n                                                                                    <span>\n                                                                                        <b>There is not a coverage hole since Z is covered by a node</b>\n                                                                                        <br/><b>10.- Repeat process for any pair of nodes and reference node of set <MathNotation\n                                                                                        inline={true}\n                                                                                        text={\"M_uX\"}/> and <MathNotation\n                                                                                        inline={true}\n                                                                                        text={\"M_dX\"}/></b>\n                                                                                    </span>\n\n                                                                                )\n                                                                            }\n\n                                                        </span>\n                                                                    )\n                                                                }\n                                            </span>\n\n                                                        )\n                                                    }\n\n\n                                                </Typography>\n                                            </div>\n                                        </Grid>\n                                    )\n                                }\n                                {\n                                    N_uX.length >= 2 && N_uX[0].id !== -1 && triangle.isAcute() && (\n                                        <span>\n\n\n                                            <b>9.- If <MathNotation inline={true} text={\"R \\\\leq\\t R_s\"}/> then there is not\n                                                a coverage hole around the reference node {this.state.referenceNode.id} and Node {N_uX[0].id}, Node {N_uX[1].id} </b><br/>\n                                                <b>R: </b> {R} <br/>\n                                            <b>R_s: </b>{this.state.referenceNode.sensingRate} <br/>\n                                            {\n                                                R <= this.state.referenceNode.sensingRate && (\n                                                    <span>\n                                                        Since <MathNotation inline={true}\n                                                                            text={\"\" + R + \" \\\\leq\\t \" + this.state.referenceNode.sensingRate + \"\"}/>, there is not\n                                                        a coverage hole around the reference node {this.state.referenceNode.id} and Node {N_uX[0].id}, Node {N_uX[1].id}\n                                                        <br/><b>10.- Repeat process for any pair of nodes and reference node of set <MathNotation\n                                                        inline={true} text={\"M_uX\"}/> and <MathNotation inline={true}\n                                                                                                        text={\"M_dX\"}/></b>\n                                                    </span>\n                                                )\n                                            }\n                                            {\n                                                R > this.state.referenceNode.sensingRate && (\n                                                    <span>\n                                                        Since <MathNotation inline={true}\n                                                                            text={\"\" + R + \" > \" + this.state.referenceNode.sensingRate + \"\"}/>, there is a coverage hole around the reference node {this.state.referenceNode.id} and Node {N_uX[0].id}, Node {N_uX[1].id}\n                                                        <br/><b>10.- Repeat process for any pair of nodes and reference node of set <MathNotation\n                                                        inline={true} text={\"M_uX\"}/> and <MathNotation inline={true}\n                                                                                                        text={\"M_dX\"}/></b>\n                                                    </span>\n                                                )\n                                            }\n                                        </span>\n                                    )\n                                }\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <PseudoDescription\n                        open={this.state.pseudoDescription}\n                        onClose={this.dialogClose}/>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default withRouter(withStyles(styles)(AlgorithmDescription));\n","import React from 'react'\nimport {Route, HashRouter, Switch} from 'react-router-dom'\nimport Main from './containers/Main'\nimport {Provider} from 'react-redux'\nimport ScrollToTop from './components/ScrollTop'\nimport TheoreticalAnalysis from \"./containers/TheoreticalAnalysis\";\nimport Demo from \"./containers/Demo\";\nimport DefinitionsAndNotations from \"./containers/DefinitionsAndNotations\";\nimport AlgorithmDescription from \"./containers/AlgorithmDescription\";\n\nexport default ({store}) => (\n    <Provider store={store}>\n        <HashRouter>\n            <ScrollToTop>\n                <Switch>\n                    <Route exact path='/' component={Main}/>\n                    <Route exact path='/tanalysis' component={TheoreticalAnalysis}/>\n                    <Route exact path='/definitions' component={DefinitionsAndNotations}/>\n                    <Route exact path='/algorithm' component={AlgorithmDescription}/>\n                    <Route exact path='/demo' component={Demo}/>\n                </Switch>\n            </ScrollToTop>\n        </HashRouter>\n    </Provider>\n)\n","import {\n    ADD_NODE,\n    ADD_NODE_ONE_HOPE_NEIGHBORS,\n    ADD_NODE_TWO_HOPE_NEIGHBORS,\n    ADD_SENSING_RATE,\n    ADD_COVERAGE_HOLE,\n    ADDING_NODES,\n    NEIGHBOR_DISCOVERY_PHASE,\n    COVERAGE_HOLE_DETECTION_PHASE,\n    GET_NODES,\n    GET_SENSING_RATE,\n    SET_REFERENCE,\n    SET_REFERENCE_NODES,\n    DRAW_CIRCUM_CENTER, RESET, ADDING_NEIGHBORS\n} from \"../actions/demo\";\nimport {Point} from \"../utils/geometryUtils\";\n\nconst initialState = {\n    nodes: [],\n    sensingRate: 80,\n    addingNodes: false,\n    addingNeighbors: false,\n    neighborDiscoveryPhase: false,\n    coverageHoleDetectionPhase: false,\n    coverageHoles: [],\n    referenceNodes: -1,\n    circumCenter: new Point(0, 0)\n};\n\nexport const demo = (state = initialState, action) => {\n    const {node, sensingRate, referenceNodes, neighbors, referenceNode, circumCenter, hole} = action;\n\n    switch (action.type) {\n        case RESET:\n            return initialState\n        case GET_NODES:\n            return {\n                ...state\n            };\n        case GET_SENSING_RATE:\n            return {\n                ...state\n            };\n        case ADDING_NODES:\n            return {\n                ...state,\n                addingNodes: !state.addingNodes\n            };\n        case ADDING_NEIGHBORS:\n            return {\n                ...state,\n                addingNeighbors: !state.addingNeighbors\n            };\n        case NEIGHBOR_DISCOVERY_PHASE:\n            return {\n                ...state,\n                neighborDiscoveryPhase: !state.neighborDiscoveryPhase\n            };\n        case COVERAGE_HOLE_DETECTION_PHASE:\n            return {\n                ...state,\n                coverageHoleDetectionPhase: !state.coverageHoleDetectionPhase\n            };\n        case ADD_NODE:\n            let copy = {\n                ...state,\n                ['nodes']: [...state.nodes]\n            };\n            copy.nodes.push(node);\n            return copy;\n        case ADD_COVERAGE_HOLE:\n            let prevStateHole = {\n                ...state,\n            };\n            prevStateHole.nodes[referenceNode].coverageHolesAroundNode.push(hole);\n            return prevStateHole;\n        case SET_REFERENCE_NODES:\n            return {\n                ...state,\n                ['referenceNodes']: referenceNodes\n            };\n        case DRAW_CIRCUM_CENTER:\n            return {\n                ...state,\n                circumCenter\n            };\n        case ADD_NODE_ONE_HOPE_NEIGHBORS:\n            let prevStateOneHop = {\n                ...state,\n            };\n            prevStateOneHop.nodes[referenceNode].oneHopeNeighbors = neighbors;\n            return prevStateOneHop;\n        case ADD_NODE_TWO_HOPE_NEIGHBORS:\n            let prevStateTwoHop = {\n                ...state,\n            };\n            prevStateTwoHop.nodes[referenceNode].twoHopeNeighbors = neighbors;\n            return prevStateTwoHop;\n        case SET_REFERENCE:\n            let prevStateSetReference = {\n                ...state\n            };\n            prevStateSetReference.nodes[referenceNode].isReference = !prevStateSetReference.nodes[referenceNode].isReference;\n            prevStateSetReference.referenceNodes = prevStateSetReference.nodes[referenceNode].isReference ? referenceNode : -1;\n            return prevStateSetReference;\n        case ADD_SENSING_RATE:\n            return {\n                ...state,\n                sensingRate: sensingRate\n            };\n        default:\n            return state\n    }\n};\n","import {combineReducers} from 'redux'\nimport {theoretical} from \"./theoretical\";\nimport {demo} from \"./demo\";\n\nconst rootReducer = combineReducers({\n    theorems: theoretical,\n    demo : demo\n});\nexport default rootReducer;","import {GET_THEORETICAL_THEOREMS} from '../actions/theoretical'\n\nexport function theoretical(state = [], action) {\n    const {theorems} = action;\n    switch (action.type) {\n        case GET_THEORETICAL_THEOREMS:\n            return {...state, theorems};\n        default:\n            return state;\n    }\n}","import { createStore, applyMiddleware,compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport { logger } from 'redux-logger'\nimport rootReducer from '../reducers'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst configureStore = preloadedState => createStore(\n    rootReducer,\n    preloadedState,\n    composeEnhancers(\n        applyMiddleware(thunk,logger)\n    )\n);\n\nexport default configureStore\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {connect, Provider} from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as theoremsActions from './actions/theoretical';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { blue, indigo } from '@material-ui/core/colors'\nimport Routes from './routes'\nimport {Route} from \"react-router-dom\";\nimport configureStore from \"./store/configureStore\";\nconst theme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: blue[900]\n    },\n    primary: {\n      main: indigo[700]\n    }\n  },\n  typography: {\n    // Use the system font instead of the default Roboto font.\n    fontFamily: [\n      '\"Lato\"',\n      'sans-serif'\n    ].join(',')\n  }\n});\nconst store = configureStore();\nclass App extends Component {\n  render() {\n    return (\n        <div>\n          <ThemeProvider theme={theme}>\n            <Routes store={store} />\n          </ThemeProvider>\n        </div>\n    );\n  }\n}\n\n// class App extends Component {\n//   render() {\n//     return (\n//         <div>\n//           <ThemeProvider theme={theme}>\n//             <Routes />\n//           </ThemeProvider>\n//         </div>\n//     );\n//   }\n// }\n\n// const App = ({ store }) => (\n//     <Provider store={store}>\n//       <ThemeProvider theme={theme}>\n//         <Routes />\n//       </ThemeProvider>\n//     </Provider>\n// );\n\nfunction mapStateToProps(state){\n  return {\n    theorems: state.theorems.theorems\n  }\n}\nfunction mapDispatchToProps (dispatch) {\n  return bindActionCreators({...theoremsActions}, dispatch)\n}\n\nexport default App;\n\n// export default connect(mapStateToProps,mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Root from './containers/Root'\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore'\nimport App from './App';\nconst store = configureStore();\n\n// ReactDOM.render(\n//     <Router>\n//         <Root store={store} />\n//     </Router>, document.getElementById('root'));\n//\n// ReactDOM.render(\n//         <App store={store} />);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/shape.208f3d38.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}